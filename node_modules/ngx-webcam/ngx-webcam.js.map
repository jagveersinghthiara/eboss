{"version":3,"file":"ngx-webcam.js","sources":["ts/ngx-webcam.ts","ts/src/app/modules/webcam/domain/webcam-init-error.ts","ts/src/app/modules/webcam/webcam.module.ts","ts/src/app/modules/webcam/webcam/webcam.component.ts","ts/src/app/modules/webcam/domain/webcam-image.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {WebcamModule,WebcamComponent,WebcamImage,WebcamInitError} from './public_api';\n","\nexport class WebcamInitError {\npublic message: string = null;\npublic mediaStreamError: MediaStreamError = null;\n}\n\nfunction WebcamInitError_tsickle_Closure_declarations() {\n/** @type {?} */\nWebcamInitError.prototype.message;\n/** @type {?} */\nWebcamInitError.prototype.mediaStreamError;\n}\n\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {WebcamComponent} from './webcam/webcam.component';\n\nconst /** @type {?} */ COMPONENTS = [\n  WebcamComponent\n];\nexport class WebcamModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    COMPONENTS\n  ],\n  exports: [\n    COMPONENTS\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction WebcamModule_tsickle_Closure_declarations() {\n/** @type {?} */\nWebcamModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWebcamModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {AfterViewInit, Component, EventEmitter, Input, OnDestroy, Output, ViewChild} from '@angular/core';\nimport {WebcamInitError} from '../domain/webcam-init-error';\nimport {WebcamImage} from '../domain/webcam-image';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nexport class WebcamComponent implements AfterViewInit, OnDestroy {\n/**\n * Defines the max width of the webcam area in px\n */\npublic width: number = 640;\n/**\n * Defines the max height of the webcam area in px\n */\npublic height: number = 480;\n/**\n * If this Observable emits, an image will be captured and emitted through 'imageCapture' EventEmitter\n */\nprivate _trigger: Observable<void>;\nprivate triggerSubscription: Subscription;\n/**\n * MediaStream object in use for streaming UserMedia data\n */\nprivate mediaStream: MediaStream = null;\n/**\n * EventEmitter which fires when an image has been captured\n */\npublic imageCapture: EventEmitter<WebcamImage> = new EventEmitter<WebcamImage>();\n/**\n * Emits a mediaError if webcam cannot be initialized (e.g. missing user permissions)\n */\npublic initError: EventEmitter<WebcamInitError> = new EventEmitter<WebcamInitError>();\n/**\n * Emits when the webcam video was clicked\n */\npublic imageClick: EventEmitter<void> = new EventEmitter<void>();\nprivate video: any;\nprivate canvas: any;\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n    this.initWebcam();\n  }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n    this.stopMediaTracks();\n    this.unsubscribeFromSubscriptions();\n  }\n/**\n * If the given Observable emits, an image will be captured and emitted through 'imageCapture' EventEmitter\n * @param {?} trigger\n * @return {?}\n */\npublic set trigger(trigger: Observable<void>) {\n    if (this.triggerSubscription) {\n      this.triggerSubscription.unsubscribe();\n    }\n    this._trigger = trigger;\n\n    // Subscribe on events from this Observable to take snapshots\n    this.triggerSubscription = this._trigger.subscribe(() => {\n      this.takeSnapshot();\n    });\n  }\n/**\n * Takes a snapshot of the current webcam's view and emits the image as an event\n * @return {?}\n */\npublic takeSnapshot(): void {\n    // set canvas size to actual video size\n    let /** @type {?} */ _video = this.video.nativeElement;\n    let /** @type {?} */ dimensions = {width: this.width, height: this.height};\n    if (_video.videoWidth) {\n      dimensions.width = _video.videoWidth;\n      dimensions.height = _video.videoHeight;\n    }\n\n    let /** @type {?} */ _canvas = this.canvas.nativeElement;\n    _canvas.width = dimensions.width;\n    _canvas.height = dimensions.height;\n\n    // paint snapshot image to canvas\n    _canvas.getContext('2d').drawImage(this.video.nativeElement, 0, 0);\n\n    // read canvas content as image\n    // TODO allow mimeType options as Input()\n    let /** @type {?} */ mimeType: string = \"image/jpeg\";\n    let /** @type {?} */ dataUrl: string = _canvas.toDataURL(mimeType);\n\n    this.imageCapture.next(new WebcamImage(dataUrl, mimeType));\n  }\n/**\n * Init webcam live view\n * @return {?}\n */\nprivate initWebcam() {\n    let /** @type {?} */ _video = this.video.nativeElement;\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      // TODO allow video options as Input()\n      navigator.mediaDevices.getUserMedia( /** @type {?} */((<MediaStreamConstraints>{video: {facingMode: \"environment\"}})))\n        .then((stream: MediaStream) => {\n          this.mediaStream = stream;\n          _video.srcObject = stream;\n          _video.play();\n        })\n        .catch((err: MediaStreamError) => {\n          this.initError.next( /** @type {?} */((<WebcamInitError>{message: err.message, mediaStreamError: err})));\n          console.warn(\"Error initializing webcam\", err);\n        });\n    } else {\n      this.initError.next( /** @type {?} */((<WebcamInitError> {message: \"Cannot read UserMedia from MediaDevices.\"})));\n    }\n  }\n/**\n * Stops all active media tracks.\n * This prevents the webcam from being indicated as active,\n * even if it is no longer used by this component.\n * @return {?}\n */\nprivate stopMediaTracks() {\n    if (this.mediaStream && this.mediaStream.getTracks) {\n      // getTracks() returns all media tracks (video+audio)\n      this.mediaStream.getTracks()\n        .forEach((track: MediaStreamTrack) => track.stop());\n    }\n  }\n/**\n * Unsubscribe from all open subscriptions\n * @return {?}\n */\nprivate unsubscribeFromSubscriptions() {\n    if (this.triggerSubscription) {\n      this.triggerSubscription.unsubscribe();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'webcam',\n  template: `\n    <div class=\"webcam-wrapper\" (click)=\"imageClick.next();\">\n      <video #video [width]=\"width\" [height]=\"height\" autoplay muted playsinline></video>\n      <canvas #canvas [width]=\"width\" [height]=\"height\"></canvas>\n    </div>\n  `,\n  styles: [`\n    .webcam-wrapper {\n      display: inline-block;\n      line-height: 0; }\n      .webcam-wrapper canvas {\n        display: none; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'width': [{ type: Input },],\n'height': [{ type: Input },],\n'imageCapture': [{ type: Output },],\n'initError': [{ type: Output },],\n'imageClick': [{ type: Output },],\n'video': [{ type: ViewChild, args: ['video', ] },],\n'canvas': [{ type: ViewChild, args: ['canvas', ] },],\n'trigger': [{ type: Input },],\n};\n}\n\nfunction WebcamComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nWebcamComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWebcamComponent.ctorParameters;\n/** @type {?} */\nWebcamComponent.propDecorators;\n/**\n * Defines the max width of the webcam area in px\n * @type {?}\n */\nWebcamComponent.prototype.width;\n/**\n * Defines the max height of the webcam area in px\n * @type {?}\n */\nWebcamComponent.prototype.height;\n/**\n * If this Observable emits, an image will be captured and emitted through 'imageCapture' EventEmitter\n * @type {?}\n */\nWebcamComponent.prototype._trigger;\n/** @type {?} */\nWebcamComponent.prototype.triggerSubscription;\n/**\n * MediaStream object in use for streaming UserMedia data\n * @type {?}\n */\nWebcamComponent.prototype.mediaStream;\n/**\n * EventEmitter which fires when an image has been captured\n * @type {?}\n */\nWebcamComponent.prototype.imageCapture;\n/**\n * Emits a mediaError if webcam cannot be initialized (e.g. missing user permissions)\n * @type {?}\n */\nWebcamComponent.prototype.initError;\n/**\n * Emits when the webcam video was clicked\n * @type {?}\n */\nWebcamComponent.prototype.imageClick;\n/** @type {?} */\nWebcamComponent.prototype.video;\n/** @type {?} */\nWebcamComponent.prototype.canvas;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Container class for a captured webcam image\n * @author basst314\n */\nexport class WebcamImage {\nprivate _mimeType: string = null;\nprivate _imageAsBase64: string = null;\nprivate _imageAsDataUrl: string = null;\n/**\n * @param {?} imageAsDataUrl\n * @param {?} mimeType\n */\npublic constructor(imageAsDataUrl: string, mimeType: string) {\n    this._mimeType = mimeType;\n    this._imageAsDataUrl = imageAsDataUrl;\n  }\n/**\n * Get the base64 encoded image data\n * @return {?}\n */\npublic get imageAsBase64(): string {\n    return this._imageAsBase64 ?\n      this._imageAsBase64 : this._imageAsBase64 = this.getDataFromDataUrl(this._imageAsDataUrl);\n  }\n/**\n * Get the encoded image as dataUrl\n * @return {?}\n */\npublic get imageAsDataUrl(): string {\n    return this._imageAsDataUrl\n  }\n/**\n * Extracts the Base64 data out of the given dataUrl.\n * @param {?} dataUrl\n * @return {?}\n */\nprivate getDataFromDataUrl(dataUrl: string) {\n    return dataUrl.replace(\"data:\" + this._mimeType + \";base64,\", \"\")\n  }\n}\n\nfunction WebcamImage_tsickle_Closure_declarations() {\n/** @type {?} */\nWebcamImage.prototype._mimeType;\n/** @type {?} */\nWebcamImage.prototype._imageAsBase64;\n/** @type {?} */\nWebcamImage.prototype._imageAsDataUrl;\n}\n\n"],"names":[],"mappings":"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"}
