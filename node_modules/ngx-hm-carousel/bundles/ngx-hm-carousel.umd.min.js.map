{"version":3,"sources":["ng://ngx-hm-carousel/lib/ngx-hm-carousel-dynamic.directive.ts","ng://ngx-hm-carousel/lib/ngx-hm-carousel-item.directive.ts","ng://ngx-hm-carousel/lib/rxjs.observable.resize.ts","ng://ngx-hm-carousel/lib/ngx-hm-carousel.component.ts","ng://ngx-hm-carousel/lib/ngx-hm-carousel.module.ts"],"names":["NgxHmCarouselDynamicDirective","_view","_template","this","clear","prototype","value","compelete","nextI","prevI","index","length","createEmbeddedView","ngOnInit","Directive","args","selector","ViewContainerRef","TemplateRef","Input","NgxHmCarouselItemDirective","EventEmitter","Output","resizeObservable","elm","cb","time","elmObserve$","Observable","create","observer","ResizeObserver","entries","obs","next","observe","pipe","debounceTime","tap","finalize","unobserve","disconnect","NgxHmCarouselComponent","platformId","_renderer","BehaviorSubject","Subject","_showNum","isAutoNum","_currentIndex","currentIndex","itemsElm","autoplay","isFromAuto","stopEvent","restart","drawView","_autoplay","isPlatformBrowser","progressWidth","doNextSub$","doNext","subscribe","unsubscribe","Object","defineProperty","_porgressWidth","progressElm","undefined","ngAfterContentInit","initVariable","ngAfterViewInit","_this","setViewWidth","reSetVariable","hammer","bindHammer","bindClick","infinite","addInfiniteElm","elmSub$","rootElm","containerResize","firstElm_clone","lastIndex","cloneNode","addStyle","position","transform","LatestElm_clone","right","top","insertBefore","containerElm","appendChild","showNum","ngOnDestroy","btnNext","btnPrev","nextListener","prevListener","destroy","setIndex","i","parentChild","nativeElement","children","Array","from","dotElm","dots","startEvent","asObservable","mourseEnable","merge","fromEvent","mouseOnContainer","delay","switchMap","runProgress","direction","scrollNum","takeUntil","container_left","getBoundingClientRect","left","align","alignDistance","clientWidth","elmWidth","isInit","getAutoNum","addClass","removeClass","setStyle","forEach","hm","Hammer","get","set","DIRECTION_HORIZONTAL","on","e","type","callClick","center","x","callRestart","stop","prePanMove","Math","abs","deltaY","outOfBound","deltaX","isDragMany","moveNum","ceil","prevIndex","nextIndex","listen","positionX","toIndex","floor","items","toArray","clickEvent","emit","isEmit","max","min","leftDistance","indexChanged","InfiniteHandler","setTimeout","distance","aniTime","betweenTime","howTimes","speed","everyIncrease","interval","t","bufferCount","round","width","style","keys","key","Component","template","styles","encapsulation","ViewEncapsulation","None","Inject","PLATFORM_ID","Renderer2","ViewChild","ContentChildren","ContentChild","NgxHmCarouselModule","NgModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, Input, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ngxHmCarouselDynamic]'\r\n})\r\nexport class NgxHmCarouselDynamicDirective implements OnInit {\r\n\r\n  @Input('ngxHmCarouselDynamic') index: number;\r\n  @Input('ngxHmCarouselDynamicLength') length: number;\r\n  @Input('ngxHmCarouselDynamicIndex')\r\n\r\n  set currentI(value: number) {\r\n    if (!this.compelete) {\r\n\r\n      const nextI = value + 1;\r\n      const prevI = value - 1;\r\n\r\n      if (\r\n        this.index === 0 ||\r\n        this.index === this.length - 1 ||\r\n        this.index === nextI ||\r\n        this.index === prevI ||\r\n        this.index === value) {\r\n        this._view.createEmbeddedView(this._template);\r\n        this.compelete = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  private compelete = false;\r\n  constructor(\r\n    private _view: ViewContainerRef,\r\n    private _template: TemplateRef<any>) {\r\n    this._view.clear();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","import { Directive, EventEmitter, Output } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ngx-hm-carousel-item]'\r\n})\r\nexport class NgxHmCarouselItemDirective {\r\n  @Output('ngx-hm-carousel-item') clickEvent = new EventEmitter<number>();\r\n\r\n  constructor() { }\r\n\r\n}\r\n","import ResizeObserver from 'resize-observer-polyfill';\r\nimport { Observable, Subscriber } from 'rxjs';\r\nimport { debounceTime, tap, finalize } from 'rxjs/operators';\r\n\r\n/**\r\n * An observable creator for element resize.\r\n * @param elm the watch element.\r\n * @param cb when resize complete, call back function.\r\n * @param time resize emit time, default is 200\r\n */\r\nexport function resizeObservable(elm: HTMLElement, cb: () => void, time = 200): Observable<any> {\r\n  let elmObserve$: ResizeObserver;\r\n  return Observable.create((observer: Subscriber<any>) => {\r\n    elmObserve$ = new ResizeObserver((entries, obs) => {\r\n      observer.next(elmObserve$);\r\n    });\r\n    elmObserve$.observe(elm);\r\n  }).pipe(\r\n    debounceTime(time),\r\n    tap(() => {\r\n      cb();\r\n    }),\r\n    finalize(() => {\r\n      elmObserve$.unobserve(elm);\r\n      elmObserve$.disconnect();\r\n    })\r\n  );\r\n}\r\n","import { isPlatformBrowser } from '@angular/common';\r\nimport {\r\n  AfterContentInit,\r\n  AfterViewInit,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  PLATFORM_ID,\r\n  QueryList,\r\n  Renderer2,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { BehaviorSubject, Observable, fromEvent, interval, merge, Subject, Subscription } from 'rxjs';\r\nimport { bufferCount, debounceTime, switchMap, takeUntil, tap } from 'rxjs/operators';\r\n\r\nimport { NgxHmCarouselItemDirective } from './ngx-hm-carousel-item.directive';\r\nimport { resizeObservable } from './rxjs.observable.resize';\r\n\r\n// if the pane is paned .25, switch to the next pane.\r\nconst PANBOUNDARY = 0.15;\r\n\r\n@Component({\r\n  selector: 'ngx-hm-carousel',\r\n  template: `<div #parentChild class=\"carousel\">\r\n  <ng-content select=\"[ngx-hm-carousel-container]\"></ng-content>\r\n  <!-- left -->\r\n  <div #prev *ngIf=\"contentPrev\"\r\n    class=\"direction left\">\r\n    <ng-container *ngTemplateOutlet=\"contentPrev\"></ng-container>\r\n  </div>\r\n  <!--  right -->\r\n  <div #next *ngIf=\"contentNext\"\r\n    class=\"direction right\">\r\n    <ng-container *ngTemplateOutlet=\"contentNext\"></ng-container>\r\n  </div>\r\n  <!-- indicators -->\r\n  <ul class=\"indicators\" *ngIf=\"dotElm\">\r\n    <li\r\n      *ngFor=\"let dot of dots; let i = index;\"\r\n      (click)=\"setIndex(i)\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"dotElm, context: {\r\n          $implicit: {\r\n            index : i,\r\n            currentIndex : currentIndex\r\n          }\r\n        }\">\r\n      </ng-container>\r\n    </li>\r\n  </ul>\r\n  <!-- progress -->\r\n  <div *ngIf=\"progressElm && autoplay\">\r\n    <ng-container\r\n      *ngTemplateOutlet=\"progressElm, context: {\r\n        $implicit: {\r\n          progress:progressWidth\r\n        }\r\n      }\">\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`:host{display:block;height:100%}.ngx-hm-carousel-display-npwrap{display:flex!important;flex-wrap:nowrap!important;flex-direction:row!important;overflow:hidden!important}.carousel{overflow:hidden;position:relative;width:100%;height:100%}.carousel ul.indicators{list-style:none;bottom:1rem;left:0;margin:0;padding:0;position:absolute;text-align:center;width:100%}.carousel ul.indicators li{cursor:pointer;display:inline-block;position:relative;padding:.5rem}.carousel .direction{position:absolute;height:100%;display:flex;align-items:center;justify-content:center;top:0}.carousel .direction.left{left:0}.carousel .direction.right{position:absolute;right:0}.transition{transition:all .4s ease-in-out}.grab{cursor:-webkit-grab;cursor:grab}.grabbing{cursor:-webkit-grabbing;cursor:grabbing}.pointer{cursor:pointer}`],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NgxHmCarouselComponent implements AfterViewInit, AfterContentInit, OnDestroy {\r\n  @ViewChild('parentChild') parentChild;\r\n  @ViewChild('prev') private btnPrev: ElementRef;\r\n  @ViewChild('next') private btnNext: ElementRef;\r\n  @ContentChildren(NgxHmCarouselItemDirective) items: QueryList<NgxHmCarouselItemDirective>;\r\n  @ContentChild('carouselPrev') contentPrev: TemplateRef<any>;\r\n  @ContentChild('carouselNext') contentNext: TemplateRef<any>;\r\n  @ContentChild('carouselDot') dotElm: TemplateRef<any>;\r\n  @ContentChild('carouselProgress') progressElm: TemplateRef<any>;\r\n\r\n  @Input('aniTime') aniTime = 400;\r\n  @Input('align') align: 'left' | 'center' | 'right' = 'center';\r\n  @Input('infinite') infinite = false;\r\n  @Input('mourse-enable') mourseEnable = false;\r\n  @Input('autoplay-speed') speed = 5000;\r\n  @Input('between-delay') delay = 8000;\r\n  @Input('autoplay-direction') direction: 'left' | 'right' = 'right';\r\n  @Input('show-num')\r\n  set showNum(value: number | 'auto') {\r\n    if (value === 'auto') {\r\n      this.isAutoNum = true;\r\n    } else {\r\n      this._showNum = value;\r\n    }\r\n  }\r\n  get showNum() {\r\n    return this._showNum;\r\n  }\r\n  @Input('scroll-num') scrollNum = 1;\r\n  @Input('drag-many') isDragMany = false;\r\n  @Input('current-index')\r\n  set currentIndex(value) {\r\n    // if now index if not equale to save index, do someting\r\n    if (this.currentIndex !== value) {\r\n      this._currentIndex = value;\r\n\r\n      if (this.itemsElm) {\r\n        if (this.autoplay && !this.isFromAuto) {\r\n          this.stopEvent.next();\r\n          this.restart.next(null);\r\n        }\r\n        this.drawView(this.currentIndex);\r\n      }\r\n    }\r\n    this.isFromAuto = false;\r\n  }\r\n  get currentIndex() {\r\n    return this._currentIndex;\r\n  }\r\n\r\n  @Input('autoplay')\r\n  set autoplay(value) {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      if (this.itemsElm) {\r\n        this.progressWidth = 0;\r\n        if (value) {\r\n          this.doNextSub$ = this.doNext.subscribe();\r\n        } else {\r\n          if (this.doNextSub$) { this.doNextSub$.unsubscribe(); }\r\n        }\r\n      }\r\n    }\r\n    this._autoplay = value;\r\n  }\r\n  get autoplay() {\r\n    return this._autoplay;\r\n  }\r\n\r\n  @Output('index-change') indexChanged = new EventEmitter();\r\n  set progressWidth(value) {\r\n    if (this.progressElm !== undefined && this.autoplay) {\r\n      this._porgressWidth = value;\r\n    }\r\n  }\r\n  get progressWidth() {\r\n    return this._porgressWidth;\r\n  }\r\n\r\n  private isFromAuto = true;\r\n  private _currentIndex = 0;\r\n  private _showNum = 1;\r\n  private isAutoNum = false;\r\n  private _autoplay = false;\r\n  private _porgressWidth = 0;\r\n\r\n  private rootElm: HTMLElement;\r\n  private alignDistance = 0;\r\n  private containerElm: HTMLElement;\r\n  private itemsElm: Array<HTMLElement>;\r\n  private lastIndex = 0;\r\n  private hammer: HammerManager;\r\n  private elmWidth = 0;\r\n  private container_left = 0;\r\n\r\n  private mouseOnContainer = false;\r\n  private restart = new BehaviorSubject<any>(null);\r\n  private stopEvent = new Subject<any>();\r\n\r\n  private doNext: Observable<any>;\r\n  private doNextSub$: Subscription;\r\n  private elmSub$: Subscription;\r\n\r\n  private firstElm_clone;\r\n  private LatestElm_clone;\r\n  private prePanMove: boolean;\r\n  public dots: Array<number>;\r\n  private nextListener: () => void;\r\n  private prevListener: () => void;\r\n\r\n  constructor(\r\n    @Inject(PLATFORM_ID) private platformId: Object,\r\n    private _renderer: Renderer2) { }\r\n\r\n  ngAfterContentInit(): void {\r\n    this.initVariable();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.setViewWidth(true);\r\n    this.reSetVariable();\r\n    this.hammer = this.bindHammer();\r\n    this.drawView(this.currentIndex);\r\n    this.bindClick();\r\n\r\n    if (this.autoplay || this.infinite) {\r\n      this.addInfiniteElm();\r\n    }\r\n\r\n    this.elmSub$ = resizeObservable(this.rootElm, () => this.containerResize()).subscribe();\r\n  }\r\n\r\n  private addInfiniteElm() {\r\n    this.firstElm_clone = this.itemsElm[this.lastIndex].cloneNode(true) as HTMLElement;\r\n    this.addStyle(this.firstElm_clone, {\r\n      position: 'absolute',\r\n      transform: 'translateX(-100%)'\r\n    });\r\n\r\n\r\n    this.LatestElm_clone = this.itemsElm[0].cloneNode(true) as HTMLElement;\r\n    this.addStyle(this.LatestElm_clone, {\r\n      position: 'absolute',\r\n      right: 0,\r\n      top: 0,\r\n      transform: 'translateX(100%)'\r\n    });\r\n\r\n    this._renderer.insertBefore(this.containerElm, this.firstElm_clone, this.itemsElm[0]);\r\n    this._renderer.appendChild(this.containerElm, this.LatestElm_clone);\r\n  }\r\n\r\n  private containerResize() {\r\n    this.reSetVariable();\r\n    this.setViewWidth();\r\n\r\n    // å çºä¸è½æ»äºï¼æä»¥è¦åå°ç¬¬ä¸åï¼ä»¥ç¢ºä¿å¨é¨é½æé¡¯ç¤º\r\n    if (this.showNum >= this.itemsElm.length) {\r\n      this.currentIndex = 0;\r\n    }\r\n    this.drawView(this.currentIndex, false);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.btnNext && this.btnPrev) {\r\n      this.nextListener();\r\n      this.prevListener();\r\n    }\r\n    this.hammer.destroy();\r\n    if (this.autoplay) {\r\n      this.doNextSub$.unsubscribe();\r\n    }\r\n\r\n    this.elmSub$.unsubscribe();\r\n  }\r\n\r\n  setIndex(i) {\r\n    this.currentIndex = i;\r\n  }\r\n\r\n  private initVariable() {\r\n    this.rootElm = this.parentChild.nativeElement;\r\n    this.containerElm = this.rootElm.children[0] as HTMLElement;\r\n    this.itemsElm = Array.from(this.containerElm.children) as HTMLElement[];\r\n    this.lastIndex = this.itemsElm.length - 1;\r\n\r\n    if (this.dotElm) {\r\n      this.dots = new Array(this.itemsElm.length);\r\n    }\r\n\r\n    let startEvent = this.restart.asObservable();\r\n    let stopEvent = this.stopEvent.asObservable();\r\n    if (this.mourseEnable) {\r\n      startEvent = merge(\r\n        startEvent,\r\n        fromEvent(this.containerElm, 'mouseleave').pipe(\r\n          tap(() => this.mouseOnContainer = false)\r\n        )\r\n      );\r\n      stopEvent = merge(\r\n        stopEvent,\r\n        fromEvent(this.containerElm, 'mouseover').pipe(\r\n          tap(() => this.mouseOnContainer = true)\r\n        )\r\n      );\r\n    }\r\n\r\n    this.doNext = startEvent.pipe(\r\n      debounceTime(this.delay),\r\n      switchMap(() =>\r\n        this.runProgress(20).pipe(\r\n          tap(() => {\r\n            this.isFromAuto = true;\r\n            // console.log('next');\r\n            if (this.direction === 'left') {\r\n              this.currentIndex -= this.scrollNum;\r\n            } else {\r\n              this.currentIndex += this.scrollNum;\r\n            }\r\n          }),\r\n          takeUntil(stopEvent.pipe(tap(() => this.progressWidth = 0))\r\n          )\r\n        )\r\n      ));\r\n\r\n    if (this.autoplay) {\r\n      this.doNextSub$ = this.doNext.subscribe();\r\n    }\r\n  }\r\n\r\n  private reSetVariable() {\r\n    this.container_left = this.rootElm.getBoundingClientRect().left;\r\n    if (this.showNum && this.showNum !== 1) {\r\n      switch (this.align) {\r\n        case 'center':\r\n          this.alignDistance = (this.rootElm.clientWidth - this.elmWidth) / 2;\r\n          break;\r\n        case 'left':\r\n          this.alignDistance = 0;\r\n          break;\r\n        case 'right':\r\n          this.alignDistance = this.rootElm.clientWidth - this.elmWidth;\r\n          break;\r\n      }\r\n    }\r\n    // console.log(this.alignDistance);\r\n  }\r\n\r\n  private setViewWidth(isInit?: boolean) {\r\n    if (this.isAutoNum) {\r\n      this._showNum = this.getAutoNum();\r\n    }\r\n    this._renderer.addClass(this.containerElm, 'grab');\r\n    // when init check view has scroll bar\r\n    const totalWidth = 0;\r\n    if (isInit) {\r\n      // remain one elm height\r\n      this._renderer.addClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');\r\n    }\r\n    this.elmWidth = (totalWidth + this.rootElm.clientWidth) / this._showNum;\r\n\r\n    this._renderer.removeClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');\r\n    this._renderer.setStyle(this.containerElm, 'width', `${this.elmWidth * this.itemsElm.length}px`);\r\n    this._renderer.setStyle(this.containerElm, 'position', 'relative');\r\n    this.itemsElm.forEach((elm: HTMLElement, index) => {\r\n      this._renderer.setStyle(elm, 'width', `${this.elmWidth}px`);\r\n    });\r\n\r\n    if (this.firstElm_clone) {\r\n      this._renderer.setStyle(this.firstElm_clone, 'width', `${this.elmWidth}px`);\r\n      this._renderer.setStyle(this.LatestElm_clone, 'width', `${this.elmWidth}px`);\r\n    }\r\n  }\r\n\r\n  private bindHammer() {\r\n    const hm = new Hammer(this.containerElm);\r\n    hm.get('pan').set({ direction: Hammer.DIRECTION_HORIZONTAL });\r\n\r\n    hm.on('panleft panright panend tap', (e: HammerInput) => {\r\n      this._renderer.removeClass(this.containerElm, 'transition');\r\n      this._renderer.addClass(this.containerElm, 'grabbing');\r\n      if (this.autoplay) {\r\n        this.stopEvent.next();\r\n      }\r\n      // console.log(e.type);\r\n      switch (e.type) {\r\n        case 'tap':\r\n          this.callClick(e.center.x);\r\n          this.callRestart();\r\n          this._renderer.removeClass(this.containerElm, 'grabbing');\r\n          break;\r\n        case 'panleft':\r\n        case 'panright':\r\n\r\n          // é¡¯ç¤ºç¸½æ¸éå°æ¼ç¸½æ¸éï¼åæ­¢æ»å\r\n          if (this.showNum >= this.itemsElm.length) {\r\n            this.hammer.stop(true);\r\n            return;\r\n          }\r\n          // console.log(e.deltaY);\r\n          this.prePanMove = false;\r\n          if (Math.abs(e.deltaY) > 50) { return; }\r\n          // Slow down at the first and last pane.\r\n          if (!(this.autoplay || this.infinite) && this.outOfBound(e.type)) {\r\n            e.deltaX *= 0.2;\r\n          }\r\n\r\n          this._renderer.setStyle(this.containerElm, 'left', `${-this.currentIndex * this.elmWidth + this.alignDistance + e.deltaX}px`);\r\n\r\n          if (!this.isDragMany) {\r\n            if (Math.abs(e.deltaX) > this.elmWidth * 0.5) {\r\n              if (e.deltaX > 0) {\r\n                this.currentIndex -= this.scrollNum;\r\n              } else {\r\n                this.currentIndex += this.scrollNum;\r\n              }\r\n              this._renderer.removeClass(this.containerElm, 'grabbing');\r\n              this.callRestart();\r\n              this.hammer.stop(true);\r\n              // remember prv action, to avoid hammer stop, then click\r\n              this.prePanMove = true;\r\n            }\r\n          }\r\n          break;\r\n        case 'panend':\r\n          this.callRestart();\r\n\r\n          this._renderer.removeClass(this.containerElm, 'grabbing');\r\n          if (Math.abs(e.deltaX) > this.elmWidth * PANBOUNDARY) {\r\n            const moveNum = this.isDragMany ?\r\n              Math.ceil(Math.abs(e.deltaX) / this.elmWidth) : this.scrollNum;\r\n\r\n            let prevIndex = this.currentIndex - moveNum;\r\n            let nextIndex = this.currentIndex + moveNum;\r\n\r\n            // å¦æä¸æ¯ç¡éå¾ªç°ï¼ä¸è½å¤§æ¼æå°æ¼\r\n\r\n            if (e.deltaX > 0) {\r\n              if (!(this.autoplay || this.infinite) && prevIndex < 0) {\r\n                prevIndex = 0;\r\n                this.drawView(0);\r\n              }\r\n\r\n              this.currentIndex = prevIndex;\r\n            } else {\r\n              if (!(this.autoplay || this.infinite) && nextIndex > this.lastIndex - this._showNum + 1) {\r\n                nextIndex = this.lastIndex - this._showNum + 1;\r\n                this.drawView(nextIndex);\r\n              }\r\n              this.currentIndex = nextIndex;\r\n            }\r\n            break;\r\n          } else {\r\n            if (!this.isDragMany && this.prePanMove) {\r\n              this.callClick(e.center.x);\r\n            }\r\n          }\r\n          // console.log(this.currentIndex);\r\n          this.drawView(this.currentIndex);\r\n          this.prePanMove = false;\r\n          break;\r\n      }\r\n    });\r\n\r\n    return hm;\r\n  }\r\n\r\n  private bindClick() {\r\n    if (this.btnNext && this.btnPrev) {\r\n      this.nextListener = this._renderer.listen(this.btnNext.nativeElement, 'click', () => {\r\n        this.currentIndex++;\r\n      });\r\n      this.prevListener = this._renderer.listen(this.btnPrev.nativeElement, 'click', () => {\r\n        this.currentIndex--;\r\n      });\r\n    }\r\n  }\r\n\r\n  private callRestart() {\r\n    if (this.autoplay && !this.mouseOnContainer) {\r\n      this.restart.next(null);\r\n    }\r\n  }\r\n\r\n  private callClick(positionX) {\r\n    // click position subtract the containerlef and alignDistance is the move distance\r\n    const toIndex = this.currentIndex + Math.floor((positionX - this.container_left - this.alignDistance) / this.elmWidth);\r\n\r\n    const elm = this.items.toArray()[toIndex];\r\n    if (elm) {\r\n      elm.clickEvent.emit(toIndex);\r\n    }\r\n  }\r\n\r\n  private drawView(index: number, isEmit = true) {\r\n    const lastIndex = this.lastIndex;\r\n\r\n    if (this.autoplay || this.infinite) {\r\n      if (index < 0) {\r\n        this._currentIndex = lastIndex;\r\n      } else if (index > lastIndex) {\r\n        this._currentIndex = 0;\r\n      }\r\n    } else {\r\n      this._currentIndex = Math.max(0, Math.min(index, this.lastIndex));\r\n    }\r\n\r\n    // åªæç¶å¤§æ¼1æè¦ç§»å\r\n    if (this.itemsElm.length > 1) {\r\n      const leftDistance = (index * this.elmWidth) - this.alignDistance;\r\n\r\n      this._renderer.setStyle(this.containerElm, 'left', `${-leftDistance}px`);\r\n      if (isEmit) {\r\n        this._renderer.addClass(this.containerElm, 'transition');\r\n        this.indexChanged.emit(this.currentIndex);\r\n      } else {\r\n        this._renderer.removeClass(this.containerElm, 'transition');\r\n      }\r\n\r\n      // å¦ææ¯å¾ªç°çï¼ç¶åç«çµæå·å·çè·³å°ç¶åçindexãleftå»\r\n      this.InfiniteHandler(index, lastIndex);\r\n    } else {\r\n      this._renderer.setStyle(this.containerElm, 'left', `${this.alignDistance}px`);\r\n    }\r\n\r\n  }\r\n\r\n  private InfiniteHandler(index: number, lastIndex: number) {\r\n    if ((this.autoplay || this.infinite)) {\r\n      setTimeout(() => {\r\n        this._renderer.removeClass(this.containerElm, 'transition');\r\n        // å¦ææ¯å¾ªç°çï¼ç¶åç«çµæå·å·çè·³å°ç¶åçindexãleftå»\r\n        let distance = 0;\r\n        if (index <= -1) {\r\n          distance = (lastIndex * this.elmWidth) - this.alignDistance;\r\n          this._renderer.setStyle(this.containerElm, 'left', `${-distance}px`);\r\n        } else if (index > lastIndex) {\r\n          this._renderer.setStyle(this.containerElm, 'left', `0px`);\r\n        }\r\n      }, this.aniTime);\r\n    }\r\n  }\r\n\r\n  private outOfBound(type) {\r\n    switch (type) {\r\n      case 'panleft':\r\n        return this.currentIndex >= this.lastIndex - this._showNum + 1;\r\n      case 'panright':\r\n        return this.currentIndex <= 0;\r\n    }\r\n  }\r\n\r\n  private runProgress(betweenTime): Observable<any> {\r\n    const howTimes = this.speed / betweenTime;\r\n    const everyIncrease = 100 / this.speed * betweenTime;\r\n    // console.log('progress');\r\n    return interval(betweenTime).pipe(\r\n      tap(t => {\r\n        this.progressWidth = (t % howTimes) * everyIncrease;\r\n      }),\r\n      bufferCount(Math.round(this.speed / betweenTime), 0)\r\n    );\r\n  }\r\n\r\n  private getAutoNum() {\r\n    const initNum = 3;\r\n    // 610\r\n    const width = this.rootElm.clientWidth;\r\n    if (width > 300) {\r\n      return Math.floor(initNum + (width / 200));\r\n    }\r\n    return initNum;\r\n  }\r\n\r\n  private addStyle(elm: HTMLElement, style: { [key: string]: string | number }) {\r\n    if (style) {\r\n      Object.keys(style).forEach((key) => {\r\n        const value = style[key];\r\n        this._renderer.setStyle(elm, key, value);\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { NgxHmCarouselDynamicDirective } from './ngx-hm-carousel-dynamic.directive';\r\nimport { NgxHmCarouselItemDirective } from './ngx-hm-carousel-item.directive';\r\nimport { NgxHmCarouselComponent } from './ngx-hm-carousel.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n  ],\r\n  declarations: [\r\n    NgxHmCarouselComponent,\r\n    NgxHmCarouselItemDirective,\r\n    NgxHmCarouselDynamicDirective\r\n  ],\r\n  exports: [\r\n    NgxHmCarouselComponent,\r\n    NgxHmCarouselItemDirective,\r\n    NgxHmCarouselDynamicDirective\r\n  ]\r\n})\r\nexport class NgxHmCarouselModule { }\r\n"]}