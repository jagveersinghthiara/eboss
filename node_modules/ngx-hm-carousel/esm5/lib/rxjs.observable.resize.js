/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import ResizeObserver from 'resize-observer-polyfill';
import { Observable } from 'rxjs';
import { debounceTime, tap, finalize } from 'rxjs/operators';
/**
 * An observable creator for element resize.
 * @param {?} elm the watch element.
 * @param {?} cb when resize complete, call back function.
 * @param {?=} time resize emit time, default is 200
 * @return {?}
 */
export function resizeObservable(elm, cb, time) {
    if (time === void 0) { time = 200; }
    var /** @type {?} */ elmObserve$;
    return Observable.create(function (observer) {
        elmObserve$ = new ResizeObserver(function (entries, obs) {
            observer.next(elmObserve$);
        });
        elmObserve$.observe(elm);
    }).pipe(debounceTime(time), tap(function () {
        cb();
    }), finalize(function () {
        elmObserve$.unobserve(elm);
        elmObserve$.disconnect();
    }));
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnhqcy5vYnNlcnZhYmxlLnJlc2l6ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1obS1jYXJvdXNlbC8iLCJzb3VyY2VzIjpbImxpYi9yeGpzLm9ic2VydmFibGUucmVzaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLGNBQWMsTUFBTSwwQkFBMEIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7OztBQVE3RCxNQUFNLDJCQUEyQixHQUFnQixFQUFFLEVBQWMsRUFBRSxJQUFVO0lBQVYscUJBQUEsRUFBQSxVQUFVO0lBQzNFLHFCQUFJLFdBQTJCLENBQUM7SUFDaEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBQyxRQUF5QjtRQUNqRCxXQUFXLEdBQUcsSUFBSSxjQUFjLENBQUMsVUFBQyxPQUFPLEVBQUUsR0FBRztZQUM1QyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzVCLENBQUMsQ0FBQztRQUNILFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDMUIsQ0FBQyxDQUFDLElBQUksQ0FDTCxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQ2xCLEdBQUcsQ0FBQztRQUNGLEVBQUUsRUFBRSxDQUFDO0tBQ04sQ0FBQyxFQUNGLFFBQVEsQ0FBQztRQUNQLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0IsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDO0tBQzFCLENBQUMsQ0FDSCxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVzaXplT2JzZXJ2ZXIgZnJvbSAncmVzaXplLW9ic2VydmVyLXBvbHlmaWxsJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaWJlciB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIHRhcCwgZmluYWxpemUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG4vKipcclxuICogQW4gb2JzZXJ2YWJsZSBjcmVhdG9yIGZvciBlbGVtZW50IHJlc2l6ZS5cclxuICogQHBhcmFtIGVsbSB0aGUgd2F0Y2ggZWxlbWVudC5cclxuICogQHBhcmFtIGNiIHdoZW4gcmVzaXplIGNvbXBsZXRlLCBjYWxsIGJhY2sgZnVuY3Rpb24uXHJcbiAqIEBwYXJhbSB0aW1lIHJlc2l6ZSBlbWl0IHRpbWUsIGRlZmF1bHQgaXMgMjAwXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVzaXplT2JzZXJ2YWJsZShlbG06IEhUTUxFbGVtZW50LCBjYjogKCkgPT4gdm9pZCwgdGltZSA9IDIwMCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgbGV0IGVsbU9ic2VydmUkOiBSZXNpemVPYnNlcnZlcjtcclxuICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUoKG9ic2VydmVyOiBTdWJzY3JpYmVyPGFueT4pID0+IHtcclxuICAgIGVsbU9ic2VydmUkID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyaWVzLCBvYnMpID0+IHtcclxuICAgICAgb2JzZXJ2ZXIubmV4dChlbG1PYnNlcnZlJCk7XHJcbiAgICB9KTtcclxuICAgIGVsbU9ic2VydmUkLm9ic2VydmUoZWxtKTtcclxuICB9KS5waXBlKFxyXG4gICAgZGVib3VuY2VUaW1lKHRpbWUpLFxyXG4gICAgdGFwKCgpID0+IHtcclxuICAgICAgY2IoKTtcclxuICAgIH0pLFxyXG4gICAgZmluYWxpemUoKCkgPT4ge1xyXG4gICAgICBlbG1PYnNlcnZlJC51bm9ic2VydmUoZWxtKTtcclxuICAgICAgZWxtT2JzZXJ2ZSQuZGlzY29ubmVjdCgpO1xyXG4gICAgfSlcclxuICApO1xyXG59XHJcbiJdfQ==