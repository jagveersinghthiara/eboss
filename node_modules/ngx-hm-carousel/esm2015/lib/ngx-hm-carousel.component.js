/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { isPlatformBrowser } from '@angular/common';
import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, Inject, Input, Output, PLATFORM_ID, QueryList, Renderer2, TemplateRef, ViewChild, ViewEncapsulation, } from '@angular/core';
import { BehaviorSubject, fromEvent, interval, merge, Subject } from 'rxjs';
import { bufferCount, debounceTime, switchMap, takeUntil, tap } from 'rxjs/operators';
import { NgxHmCarouselItemDirective } from './ngx-hm-carousel-item.directive';
import { resizeObservable } from './rxjs.observable.resize';
// if the pane is paned .25, switch to the next pane.
const /** @type {?} */ PANBOUNDARY = 0.15;
export class NgxHmCarouselComponent {
    /**
     * @param {?} platformId
     * @param {?} _renderer
     */
    constructor(platformId, _renderer) {
        this.platformId = platformId;
        this._renderer = _renderer;
        this.aniTime = 400;
        this.align = 'center';
        this.infinite = false;
        this.mourseEnable = false;
        this.speed = 5000;
        this.delay = 8000;
        this.direction = 'right';
        this.scrollNum = 1;
        this.isDragMany = false;
        this.indexChanged = new EventEmitter();
        this.isFromAuto = true;
        this._currentIndex = 0;
        this._showNum = 1;
        this.isAutoNum = false;
        this._autoplay = false;
        this._porgressWidth = 0;
        this.alignDistance = 0;
        this.lastIndex = 0;
        this.elmWidth = 0;
        this.container_left = 0;
        this.mouseOnContainer = false;
        this.restart = new BehaviorSubject(null);
        this.stopEvent = new Subject();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set showNum(value) {
        if (value === 'auto') {
            this.isAutoNum = true;
        }
        else {
            this._showNum = value;
        }
    }
    /**
     * @return {?}
     */
    get showNum() {
        return this._showNum;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set currentIndex(value) {
        // if now index if not equale to save index, do someting
        if (this.currentIndex !== value) {
            this._currentIndex = value;
            if (this.itemsElm) {
                if (this.autoplay && !this.isFromAuto) {
                    this.stopEvent.next();
                    this.restart.next(null);
                }
                this.drawView(this.currentIndex);
            }
        }
        this.isFromAuto = false;
    }
    /**
     * @return {?}
     */
    get currentIndex() {
        return this._currentIndex;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set autoplay(value) {
        if (isPlatformBrowser(this.platformId)) {
            if (this.itemsElm) {
                this.progressWidth = 0;
                if (value) {
                    this.doNextSub$ = this.doNext.subscribe();
                }
                else {
                    if (this.doNextSub$) {
                        this.doNextSub$.unsubscribe();
                    }
                }
            }
        }
        this._autoplay = value;
    }
    /**
     * @return {?}
     */
    get autoplay() {
        return this._autoplay;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set progressWidth(value) {
        if (this.progressElm !== undefined && this.autoplay) {
            this._porgressWidth = value;
        }
    }
    /**
     * @return {?}
     */
    get progressWidth() {
        return this._porgressWidth;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.initVariable();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.setViewWidth(true);
        this.reSetVariable();
        this.hammer = this.bindHammer();
        this.drawView(this.currentIndex);
        this.bindClick();
        if (this.autoplay || this.infinite) {
            this.addInfiniteElm();
        }
        this.elmSub$ = resizeObservable(this.rootElm, () => this.containerResize()).subscribe();
    }
    /**
     * @return {?}
     */
    addInfiniteElm() {
        this.firstElm_clone = /** @type {?} */ (this.itemsElm[this.lastIndex].cloneNode(true));
        this.addStyle(this.firstElm_clone, {
            position: 'absolute',
            transform: 'translateX(-100%)'
        });
        this.LatestElm_clone = /** @type {?} */ (this.itemsElm[0].cloneNode(true));
        this.addStyle(this.LatestElm_clone, {
            position: 'absolute',
            right: 0,
            top: 0,
            transform: 'translateX(100%)'
        });
        this._renderer.insertBefore(this.containerElm, this.firstElm_clone, this.itemsElm[0]);
        this._renderer.appendChild(this.containerElm, this.LatestElm_clone);
    }
    /**
     * @return {?}
     */
    containerResize() {
        this.reSetVariable();
        this.setViewWidth();
        // 因為不能滑了，所以要回到第一個，以確保全部都有顯示
        if (this.showNum >= this.itemsElm.length) {
            this.currentIndex = 0;
        }
        this.drawView(this.currentIndex, false);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.btnNext && this.btnPrev) {
            this.nextListener();
            this.prevListener();
        }
        this.hammer.destroy();
        if (this.autoplay) {
            this.doNextSub$.unsubscribe();
        }
        this.elmSub$.unsubscribe();
    }
    /**
     * @param {?} i
     * @return {?}
     */
    setIndex(i) {
        this.currentIndex = i;
    }
    /**
     * @return {?}
     */
    initVariable() {
        this.rootElm = this.parentChild.nativeElement;
        this.containerElm = /** @type {?} */ (this.rootElm.children[0]);
        this.itemsElm = /** @type {?} */ (Array.from(this.containerElm.children));
        this.lastIndex = this.itemsElm.length - 1;
        if (this.dotElm) {
            this.dots = new Array(this.itemsElm.length);
        }
        let /** @type {?} */ startEvent = this.restart.asObservable();
        let /** @type {?} */ stopEvent = this.stopEvent.asObservable();
        if (this.mourseEnable) {
            startEvent = merge(startEvent, fromEvent(this.containerElm, 'mouseleave').pipe(tap(() => this.mouseOnContainer = false)));
            stopEvent = merge(stopEvent, fromEvent(this.containerElm, 'mouseover').pipe(tap(() => this.mouseOnContainer = true)));
        }
        this.doNext = startEvent.pipe(debounceTime(this.delay), switchMap(() => this.runProgress(20).pipe(tap(() => {
            this.isFromAuto = true;
            // console.log('next');
            if (this.direction === 'left') {
                this.currentIndex -= this.scrollNum;
            }
            else {
                this.currentIndex += this.scrollNum;
            }
        }), takeUntil(stopEvent.pipe(tap(() => this.progressWidth = 0))))));
        if (this.autoplay) {
            this.doNextSub$ = this.doNext.subscribe();
        }
    }
    /**
     * @return {?}
     */
    reSetVariable() {
        this.container_left = this.rootElm.getBoundingClientRect().left;
        if (this.showNum && this.showNum !== 1) {
            switch (this.align) {
                case 'center':
                    this.alignDistance = (this.rootElm.clientWidth - this.elmWidth) / 2;
                    break;
                case 'left':
                    this.alignDistance = 0;
                    break;
                case 'right':
                    this.alignDistance = this.rootElm.clientWidth - this.elmWidth;
                    break;
            }
        }
        // console.log(this.alignDistance);
    }
    /**
     * @param {?=} isInit
     * @return {?}
     */
    setViewWidth(isInit) {
        if (this.isAutoNum) {
            this._showNum = this.getAutoNum();
        }
        this._renderer.addClass(this.containerElm, 'grab');
        // when init check view has scroll bar
        const /** @type {?} */ totalWidth = 0;
        if (isInit) {
            // remain one elm height
            this._renderer.addClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');
        }
        this.elmWidth = (totalWidth + this.rootElm.clientWidth) / this._showNum;
        this._renderer.removeClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');
        this._renderer.setStyle(this.containerElm, 'width', `${this.elmWidth * this.itemsElm.length}px`);
        this._renderer.setStyle(this.containerElm, 'position', 'relative');
        this.itemsElm.forEach((elm, index) => {
            this._renderer.setStyle(elm, 'width', `${this.elmWidth}px`);
        });
        if (this.firstElm_clone) {
            this._renderer.setStyle(this.firstElm_clone, 'width', `${this.elmWidth}px`);
            this._renderer.setStyle(this.LatestElm_clone, 'width', `${this.elmWidth}px`);
        }
    }
    /**
     * @return {?}
     */
    bindHammer() {
        const /** @type {?} */ hm = new Hammer(this.containerElm);
        hm.get('pan').set({ direction: Hammer.DIRECTION_HORIZONTAL });
        hm.on('panleft panright panend tap', (e) => {
            this._renderer.removeClass(this.containerElm, 'transition');
            this._renderer.addClass(this.containerElm, 'grabbing');
            if (this.autoplay) {
                this.stopEvent.next();
            }
            // console.log(e.type);
            switch (e.type) {
                case 'tap':
                    this.callClick(e.center.x);
                    this.callRestart();
                    this._renderer.removeClass(this.containerElm, 'grabbing');
                    break;
                case 'panleft':
                case 'panright':
                    // 顯示總數量小於總數量，停止滑動
                    if (this.showNum >= this.itemsElm.length) {
                        this.hammer.stop(true);
                        return;
                    }
                    // console.log(e.deltaY);
                    this.prePanMove = false;
                    if (Math.abs(e.deltaY) > 50) {
                        return;
                    }
                    // Slow down at the first and last pane.
                    if (!(this.autoplay || this.infinite) && this.outOfBound(e.type)) {
                        e.deltaX *= 0.2;
                    }
                    this._renderer.setStyle(this.containerElm, 'left', `${-this.currentIndex * this.elmWidth + this.alignDistance + e.deltaX}px`);
                    if (!this.isDragMany) {
                        if (Math.abs(e.deltaX) > this.elmWidth * 0.5) {
                            if (e.deltaX > 0) {
                                this.currentIndex -= this.scrollNum;
                            }
                            else {
                                this.currentIndex += this.scrollNum;
                            }
                            this._renderer.removeClass(this.containerElm, 'grabbing');
                            this.callRestart();
                            this.hammer.stop(true);
                            // remember prv action, to avoid hammer stop, then click
                            this.prePanMove = true;
                        }
                    }
                    break;
                case 'panend':
                    this.callRestart();
                    this._renderer.removeClass(this.containerElm, 'grabbing');
                    if (Math.abs(e.deltaX) > this.elmWidth * PANBOUNDARY) {
                        const /** @type {?} */ moveNum = this.isDragMany ?
                            Math.ceil(Math.abs(e.deltaX) / this.elmWidth) : this.scrollNum;
                        let /** @type {?} */ prevIndex = this.currentIndex - moveNum;
                        let /** @type {?} */ nextIndex = this.currentIndex + moveNum;
                        // 如果不是無限循環，不能大於或小於
                        if (e.deltaX > 0) {
                            if (!(this.autoplay || this.infinite) && prevIndex < 0) {
                                prevIndex = 0;
                                this.drawView(0);
                            }
                            this.currentIndex = prevIndex;
                        }
                        else {
                            if (!(this.autoplay || this.infinite) && nextIndex > this.lastIndex - this._showNum + 1) {
                                nextIndex = this.lastIndex - this._showNum + 1;
                                this.drawView(nextIndex);
                            }
                            this.currentIndex = nextIndex;
                        }
                        break;
                    }
                    else {
                        if (!this.isDragMany && this.prePanMove) {
                            this.callClick(e.center.x);
                        }
                    }
                    // console.log(this.currentIndex);
                    this.drawView(this.currentIndex);
                    this.prePanMove = false;
                    break;
            }
        });
        return hm;
    }
    /**
     * @return {?}
     */
    bindClick() {
        if (this.btnNext && this.btnPrev) {
            this.nextListener = this._renderer.listen(this.btnNext.nativeElement, 'click', () => {
                this.currentIndex++;
            });
            this.prevListener = this._renderer.listen(this.btnPrev.nativeElement, 'click', () => {
                this.currentIndex--;
            });
        }
    }
    /**
     * @return {?}
     */
    callRestart() {
        if (this.autoplay && !this.mouseOnContainer) {
            this.restart.next(null);
        }
    }
    /**
     * @param {?} positionX
     * @return {?}
     */
    callClick(positionX) {
        // click position subtract the containerlef and alignDistance is the move distance
        const /** @type {?} */ toIndex = this.currentIndex + Math.floor((positionX - this.container_left - this.alignDistance) / this.elmWidth);
        const /** @type {?} */ elm = this.items.toArray()[toIndex];
        if (elm) {
            elm.clickEvent.emit(toIndex);
        }
    }
    /**
     * @param {?} index
     * @param {?=} isEmit
     * @return {?}
     */
    drawView(index, isEmit = true) {
        const /** @type {?} */ lastIndex = this.lastIndex;
        if (this.autoplay || this.infinite) {
            if (index < 0) {
                this._currentIndex = lastIndex;
            }
            else if (index > lastIndex) {
                this._currentIndex = 0;
            }
        }
        else {
            this._currentIndex = Math.max(0, Math.min(index, this.lastIndex));
        }
        // 只有當大於1才要移動
        if (this.itemsElm.length > 1) {
            const /** @type {?} */ leftDistance = (index * this.elmWidth) - this.alignDistance;
            this._renderer.setStyle(this.containerElm, 'left', `${-leftDistance}px`);
            if (isEmit) {
                this._renderer.addClass(this.containerElm, 'transition');
                this.indexChanged.emit(this.currentIndex);
            }
            else {
                this._renderer.removeClass(this.containerElm, 'transition');
            }
            // 如果是循環的，當動畫結束偷偷的跳到當前的index、left去
            this.InfiniteHandler(index, lastIndex);
        }
        else {
            this._renderer.setStyle(this.containerElm, 'left', `${this.alignDistance}px`);
        }
    }
    /**
     * @param {?} index
     * @param {?} lastIndex
     * @return {?}
     */
    InfiniteHandler(index, lastIndex) {
        if ((this.autoplay || this.infinite)) {
            setTimeout(() => {
                this._renderer.removeClass(this.containerElm, 'transition');
                // 如果是循環的，當動畫結束偷偷的跳到當前的index、left去
                let /** @type {?} */ distance = 0;
                if (index <= -1) {
                    distance = (lastIndex * this.elmWidth) - this.alignDistance;
                    this._renderer.setStyle(this.containerElm, 'left', `${-distance}px`);
                }
                else if (index > lastIndex) {
                    this._renderer.setStyle(this.containerElm, 'left', `0px`);
                }
            }, this.aniTime);
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    outOfBound(type) {
        switch (type) {
            case 'panleft':
                return this.currentIndex >= this.lastIndex - this._showNum + 1;
            case 'panright':
                return this.currentIndex <= 0;
        }
    }
    /**
     * @param {?} betweenTime
     * @return {?}
     */
    runProgress(betweenTime) {
        const /** @type {?} */ howTimes = this.speed / betweenTime;
        const /** @type {?} */ everyIncrease = 100 / this.speed * betweenTime;
        // console.log('progress');
        return interval(betweenTime).pipe(tap(t => {
            this.progressWidth = (t % howTimes) * everyIncrease;
        }), bufferCount(Math.round(this.speed / betweenTime), 0));
    }
    /**
     * @return {?}
     */
    getAutoNum() {
        const /** @type {?} */ initNum = 3;
        // 610
        const /** @type {?} */ width = this.rootElm.clientWidth;
        if (width > 300) {
            return Math.floor(initNum + (width / 200));
        }
        return initNum;
    }
    /**
     * @param {?} elm
     * @param {?} style
     * @return {?}
     */
    addStyle(elm, style) {
        if (style) {
            Object.keys(style).forEach((key) => {
                const /** @type {?} */ value = style[key];
                this._renderer.setStyle(elm, key, value);
            });
        }
    }
}
NgxHmCarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-hm-carousel',
                template: `<div #parentChild class="carousel">
  <ng-content select="[ngx-hm-carousel-container]"></ng-content>
  <!-- left -->
  <div #prev *ngIf="contentPrev"
    class="direction left">
    <ng-container *ngTemplateOutlet="contentPrev"></ng-container>
  </div>
  <!--  right -->
  <div #next *ngIf="contentNext"
    class="direction right">
    <ng-container *ngTemplateOutlet="contentNext"></ng-container>
  </div>
  <!-- indicators -->
  <ul class="indicators" *ngIf="dotElm">
    <li
      *ngFor="let dot of dots; let i = index;"
      (click)="setIndex(i)">
      <ng-container
        *ngTemplateOutlet="dotElm, context: {
          $implicit: {
            index : i,
            currentIndex : currentIndex
          }
        }">
      </ng-container>
    </li>
  </ul>
  <!-- progress -->
  <div *ngIf="progressElm && autoplay">
    <ng-container
      *ngTemplateOutlet="progressElm, context: {
        $implicit: {
          progress:progressWidth
        }
      }">
    </ng-container>
  </div>
</div>
`,
                styles: [`:host{display:block;height:100%}.ngx-hm-carousel-display-npwrap{display:flex!important;flex-wrap:nowrap!important;flex-direction:row!important;overflow:hidden!important}.carousel{overflow:hidden;position:relative;width:100%;height:100%}.carousel ul.indicators{list-style:none;bottom:1rem;left:0;margin:0;padding:0;position:absolute;text-align:center;width:100%}.carousel ul.indicators li{cursor:pointer;display:inline-block;position:relative;padding:.5rem}.carousel .direction{position:absolute;height:100%;display:flex;align-items:center;justify-content:center;top:0}.carousel .direction.left{left:0}.carousel .direction.right{position:absolute;right:0}.transition{transition:all .4s ease-in-out}.grab{cursor:-webkit-grab;cursor:grab}.grabbing{cursor:-webkit-grabbing;cursor:grabbing}.pointer{cursor:pointer}`],
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
NgxHmCarouselComponent.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
    { type: Renderer2, },
];
NgxHmCarouselComponent.propDecorators = {
    "parentChild": [{ type: ViewChild, args: ['parentChild',] },],
    "btnPrev": [{ type: ViewChild, args: ['prev',] },],
    "btnNext": [{ type: ViewChild, args: ['next',] },],
    "items": [{ type: ContentChildren, args: [NgxHmCarouselItemDirective,] },],
    "contentPrev": [{ type: ContentChild, args: ['carouselPrev',] },],
    "contentNext": [{ type: ContentChild, args: ['carouselNext',] },],
    "dotElm": [{ type: ContentChild, args: ['carouselDot',] },],
    "progressElm": [{ type: ContentChild, args: ['carouselProgress',] },],
    "aniTime": [{ type: Input, args: ['aniTime',] },],
    "align": [{ type: Input, args: ['align',] },],
    "infinite": [{ type: Input, args: ['infinite',] },],
    "mourseEnable": [{ type: Input, args: ['mourse-enable',] },],
    "speed": [{ type: Input, args: ['autoplay-speed',] },],
    "delay": [{ type: Input, args: ['between-delay',] },],
    "direction": [{ type: Input, args: ['autoplay-direction',] },],
    "showNum": [{ type: Input, args: ['show-num',] },],
    "scrollNum": [{ type: Input, args: ['scroll-num',] },],
    "isDragMany": [{ type: Input, args: ['drag-many',] },],
    "currentIndex": [{ type: Input, args: ['current-index',] },],
    "autoplay": [{ type: Input, args: ['autoplay',] },],
    "indexChanged": [{ type: Output, args: ['index-change',] },],
};
function NgxHmCarouselComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgxHmCarouselComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgxHmCarouselComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    NgxHmCarouselComponent.propDecorators;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.parentChild;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.btnPrev;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.btnNext;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.items;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.contentPrev;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.contentNext;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.dotElm;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.progressElm;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.aniTime;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.align;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.infinite;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.mourseEnable;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.speed;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.delay;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.direction;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.scrollNum;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.isDragMany;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.indexChanged;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.isFromAuto;
    /** @type {?} */
    NgxHmCarouselComponent.prototype._currentIndex;
    /** @type {?} */
    NgxHmCarouselComponent.prototype._showNum;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.isAutoNum;
    /** @type {?} */
    NgxHmCarouselComponent.prototype._autoplay;
    /** @type {?} */
    NgxHmCarouselComponent.prototype._porgressWidth;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.rootElm;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.alignDistance;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.containerElm;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.itemsElm;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.lastIndex;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.hammer;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.elmWidth;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.container_left;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.mouseOnContainer;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.restart;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.stopEvent;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.doNext;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.doNextSub$;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.elmSub$;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.firstElm_clone;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.LatestElm_clone;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.prePanMove;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.dots;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.nextListener;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.prevListener;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.platformId;
    /** @type {?} */
    NgxHmCarouselComponent.prototype._renderer;
}

//# sourceMappingURL=data:application/json;base64,