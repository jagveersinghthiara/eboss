import { Component, EventEmitter, Input, NgModule, Output, ViewChild } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * Container class for a captured webcam image
 * @author basst314
 */
class WebcamImage {
    /**
     * @param {?} imageAsDataUrl
     * @param {?} mimeType
     */
    constructor(imageAsDataUrl, mimeType) {
        this._mimeType = null;
        this._imageAsBase64 = null;
        this._imageAsDataUrl = null;
        this._mimeType = mimeType;
        this._imageAsDataUrl = imageAsDataUrl;
    }
    /**
     * Get the base64 encoded image data
     * @return {?}
     */
    get imageAsBase64() {
        return this._imageAsBase64 ?
            this._imageAsBase64 : this._imageAsBase64 = this.getDataFromDataUrl(this._imageAsDataUrl);
    }
    /**
     * Get the encoded image as dataUrl
     * @return {?}
     */
    get imageAsDataUrl() {
        return this._imageAsDataUrl;
    }
    /**
     * Extracts the Base64 data out of the given dataUrl.
     * @param {?} dataUrl
     * @return {?}
     */
    getDataFromDataUrl(dataUrl) {
        return dataUrl.replace("data:" + this._mimeType + ";base64,", "");
    }
}

class WebcamComponent {
    constructor() {
        /**
         * Defines the max width of the webcam area in px
         */
        this.width = 640;
        /**
         * Defines the max height of the webcam area in px
         */
        this.height = 480;
        /**
         * MediaStream object in use for streaming UserMedia data
         */
        this.mediaStream = null;
        /**
         * EventEmitter which fires when an image has been captured
         */
        this.imageCapture = new EventEmitter();
        /**
         * Emits a mediaError if webcam cannot be initialized (e.g. missing user permissions)
         */
        this.initError = new EventEmitter();
        /**
         * Emits when the webcam video was clicked
         */
        this.imageClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initWebcam();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.stopMediaTracks();
        this.unsubscribeFromSubscriptions();
    }
    /**
     * If the given Observable emits, an image will be captured and emitted through 'imageCapture' EventEmitter
     * @param {?} trigger
     * @return {?}
     */
    set trigger(trigger) {
        if (this.triggerSubscription) {
            this.triggerSubscription.unsubscribe();
        }
        this._trigger = trigger;
        // Subscribe on events from this Observable to take snapshots
        this.triggerSubscription = this._trigger.subscribe(() => {
            this.takeSnapshot();
        });
    }
    /**
     * Takes a snapshot of the current webcam's view and emits the image as an event
     * @return {?}
     */
    takeSnapshot() {
        // set canvas size to actual video size
        let /** @type {?} */ _video = this.video.nativeElement;
        let /** @type {?} */ dimensions = { width: this.width, height: this.height };
        if (_video.videoWidth) {
            dimensions.width = _video.videoWidth;
            dimensions.height = _video.videoHeight;
        }
        let /** @type {?} */ _canvas = this.canvas.nativeElement;
        _canvas.width = dimensions.width;
        _canvas.height = dimensions.height;
        // paint snapshot image to canvas
        _canvas.getContext('2d').drawImage(this.video.nativeElement, 0, 0);
        // read canvas content as image
        // TODO allow mimeType options as Input()
        let /** @type {?} */ mimeType = "image/jpeg";
        let /** @type {?} */ dataUrl = _canvas.toDataURL(mimeType);
        this.imageCapture.next(new WebcamImage(dataUrl, mimeType));
    }
    /**
     * Init webcam live view
     * @return {?}
     */
    initWebcam() {
        let /** @type {?} */ _video = this.video.nativeElement;
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            // TODO allow video options as Input()
            navigator.mediaDevices.getUserMedia(/** @type {?} */ ({ video: { facingMode: "environment" } }))
                .then((stream) => {
                this.mediaStream = stream;
                _video.srcObject = stream;
                _video.play();
            })
                .catch((err) => {
                this.initError.next(/** @type {?} */ ({ message: err.message, mediaStreamError: err }));
                console.warn("Error initializing webcam", err);
            });
        }
        else {
            this.initError.next(/** @type {?} */ ({ message: "Cannot read UserMedia from MediaDevices." }));
        }
    }
    /**
     * Stops all active media tracks.
     * This prevents the webcam from being indicated as active,
     * even if it is no longer used by this component.
     * @return {?}
     */
    stopMediaTracks() {
        if (this.mediaStream && this.mediaStream.getTracks) {
            // getTracks() returns all media tracks (video+audio)
            this.mediaStream.getTracks()
                .forEach((track) => track.stop());
        }
    }
    /**
     * Unsubscribe from all open subscriptions
     * @return {?}
     */
    unsubscribeFromSubscriptions() {
        if (this.triggerSubscription) {
            this.triggerSubscription.unsubscribe();
        }
    }
}
WebcamComponent.decorators = [
    { type: Component, args: [{
                selector: 'webcam',
                template: `
    <div class="webcam-wrapper" (click)="imageClick.next();">
      <video #video [width]="width" [height]="height" autoplay muted playsinline></video>
      <canvas #canvas [width]="width" [height]="height"></canvas>
    </div>
  `,
                styles: [`
    .webcam-wrapper {
      display: inline-block;
      line-height: 0; }
      .webcam-wrapper canvas {
        display: none; }
  `]
            },] },
];
/**
 * @nocollapse
 */
WebcamComponent.ctorParameters = () => [];
WebcamComponent.propDecorators = {
    'width': [{ type: Input },],
    'height': [{ type: Input },],
    'imageCapture': [{ type: Output },],
    'initError': [{ type: Output },],
    'imageClick': [{ type: Output },],
    'video': [{ type: ViewChild, args: ['video',] },],
    'canvas': [{ type: ViewChild, args: ['canvas',] },],
    'trigger': [{ type: Input },],
};

const COMPONENTS = [
    WebcamComponent
];
class WebcamModule {
}
WebcamModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    COMPONENTS
                ],
                exports: [
                    COMPONENTS
                ]
            },] },
];
/**
 * @nocollapse
 */
WebcamModule.ctorParameters = () => [];

class WebcamInitError {
    constructor() {
        this.message = null;
        this.mediaStreamError = null;
    }
}

/**
 * Generated bundle index. Do not edit.
 */

export { WebcamModule, WebcamComponent, WebcamImage, WebcamInitError };
//# sourceMappingURL=ngx-webcam.js.map
