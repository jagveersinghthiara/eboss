{
  "_from": "recordrtc",
  "_id": "recordrtc@5.4.6",
  "_inBundle": false,
  "_integrity": "sha1-vhxXBVBwg2OyP7pTAyaFS+BoMhA=",
  "_location": "/recordrtc",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "recordrtc",
    "fetchSpec": "latest",
    "name": "recordrtc",
    "raw": "recordrtc",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/recordrtc/-/recordrtc-5.4.6.tgz",
  "_shasum": "be1c570550708363b23fba530326854be0683210",
  "_shrinkwrap": null,
  "_spec": "recordrtc",
  "_where": "/Users/apple/Desktop/Mani's Work/ezeejuly/client",
  "analyze": false,
  "author": {
    "email": "muazkh@gmail.com",
    "name": "Muaz Khan",
    "url": "http://www.muazkhan.com/"
  },
  "bugs": {
    "email": "muazkh@gmail.com",
    "url": "https://github.com/muaz-khan/RecordRTC/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "RecordRTC is a server-less (entire client-side) JavaScript library can be used to record WebRTC audio/video media streams. It supports cross-browser audio/video recording.",
  "devDependencies": {
    "grunt": "0.4.5",
    "grunt-bump": "0.7.0",
    "grunt-cli": "0.1.13",
    "grunt-contrib-clean": "0.6.0",
    "grunt-contrib-concat": "0.5.1",
    "grunt-contrib-copy": "0.8.2",
    "grunt-contrib-jshint": "0.11.3",
    "grunt-contrib-uglify": "0.11.0",
    "grunt-jsbeautifier": "0.2.10",
    "grunt-replace": "0.11.0",
    "load-grunt-tasks": "3.4.0"
  },
  "homepage": "http://RecordRTC.org/",
  "keywords": [
    "audio-recording",
    "audio/video recording",
    "gif-recording",
    "recordrtc",
    "video-recording",
    "webrtc"
  ],
  "license": "MIT",
  "main": "RecordRTC.js",
  "name": "recordrtc",
  "optionalDependencies": {},
  "preferGlobal": false,
  "readme": "# RecordRTC: WebRTC JavaScript Library for Audio+Video+Screen Recording\r\n\r\n# Demo: https://www.webrtc-experiment.com/RecordRTC/\r\n\r\n[RecordRTC Documentation](http://RecordRTC.org/) / [RecordRTC Wiki Pages](https://github.com/muaz-khan/RecordRTC/wiki) / [RecordRTC Demo](https://www.webrtc-experiment.com/RecordRTC/) / [WebRTC Experiments](https://www.webrtc-experiment.com/)\r\n\r\n[![npm](https://img.shields.io/npm/v/recordrtc.svg)](https://npmjs.org/package/recordrtc) [![downloads](https://img.shields.io/npm/dm/recordrtc.svg)](https://npmjs.org/package/recordrtc) [![Build Status: Linux](https://travis-ci.org/muaz-khan/RecordRTC.png?branch=master)](https://travis-ci.org/muaz-khan/RecordRTC)\r\n\r\n> [RecordRTC](https://www.webrtc-experiment.com/RecordRTC/) is a JavaScript-based media-recording library for modern web-browsers (supporting WebRTC getUserMedia API). It is optimized for different devices and browsers to bring all client-side (pluginfree) recording solutions in single place.\r\n\r\n<a href=\"https://www.youtube.com/watch?v=YrLzTgdJ-Kg\"><img src=\"https://cdn.webrtc-experiment.com/images/RecordRTC-YouTube.png\" alt=\"YouTube Video Tutorial for RecordRTC!\" /></a>\r\n\r\n# Check all releases:\r\n\r\n* https://github.com/muaz-khan/RecordRTC/releases\r\n\r\nPlease check [dev](https://github.com/muaz-khan/RecordRTC/tree/master/dev) directory for development files.\r\n\r\n1. [RecordRTC API Reference](http://RecordRTC.org/RecordRTC.html)\r\n2. [MediaStreamRecorder API Reference](http://RecordRTC.org/MediaStreamRecorder.html)\r\n3. [StereoAudioRecorder API Reference](http://RecordRTC.org/StereoAudioRecorder.html)\r\n4. [WhammyRecorder API Reference](http://RecordRTC.org/WhammyRecorder.html)\r\n5. [Whammy API Reference](http://RecordRTC.org/Whammy.html)\r\n6. [CanvasRecorder API Reference](http://RecordRTC.org/CanvasRecorder.html)\r\n7. [MultiStreamRecorder API Reference](http://recordrtc.org/MultiStreamRecorder.html)\r\n8. [MRecordRTC API Reference](http://RecordRTC.org/MRecordRTC.html)\r\n9. [RecordRTCPromisesHandler API Reference](http://recordrtc.org/RecordRTCPromisesHandler.html)\r\n10. [GifRecorder API Reference](http://RecordRTC.org/GifRecorder.html)\r\n11. [Global API Reference](http://RecordRTC.org/global.html)\r\n12 [RecordRTC and Upload to PHP Server](http://www.muazkhan.com/2017/08/recordrtc-and-upload-to-php-server.html)\r\n\r\n## Browsers Support:\r\n\r\n| Browser        | Support           | Features |\r\n| ------------- |-------------|-------------|\r\n| Firefox | [Stable](http://www.mozilla.org/en-US/firefox/new/) / [Aurora](http://www.mozilla.org/en-US/firefox/aurora/) / [Nightly](http://nightly.mozilla.org/) | Audio+Video (Both local/remote) |\r\n| Google Chrome | [Stable](https://www.google.com/intl/en_uk/chrome/browser/) / [Canary](https://www.google.com/intl/en/chrome/browser/canary.html) / [Beta](https://www.google.com/intl/en/chrome/browser/beta.html) / [Dev](https://www.google.com/intl/en/chrome/browser/index.html?extra=devchannel#eula) | Audio+Video (Both local/remote) |\r\n| Opera | [Stable](http://www.opera.com/) / [NEXT](http://www.opera.com/computer/next)  | Audio+Video (Both local/remote) |\r\n| Android | [Chrome](https://play.google.com/store/apps/details?id=com.chrome.beta&hl=en) / [Firefox](https://play.google.com/store/apps/details?id=org.mozilla.firefox) / [Opera](https://play.google.com/store/apps/details?id=com.opera.browser) | Audio+Video (Both local/remote) |\r\n| Microsoft Edge | [Normal Build](https://www.microsoft.com/en-us/windows/microsoft-edge) | **Only Audio** - No Video - No Canvas - No Screen |\r\n| Safari 11 | preview | **Only Audio** - No Video - No Canvas - No Screen |\r\n\r\n## Frameworks\r\n\r\n1. Angular2 - [check article](https://medium.com/@SumanthShankar/integrate-recordrtc-with-angular-2-typescript-942c9c4ca93f#.7x5yf2nr5) and [demo github repository](https://github.com/ShankarSumanth/Angular2-RecordRTC) - via [#186](https://github.com/muaz-khan/RecordRTC/issues/186)\r\n2. React.js - [check this article](http://suzannewang.com/recordrtc/) and [demo github repository](https://github.com/szwang/recordrtc-react)\r\n3. Video.js - [check this github repository](https://github.com/collab-project/videojs-record)\r\n4. meteor - [check an old github repository](https://github.com/launchbricklabs/recordrtc-meteor-demo)\r\n\r\n> Want to add more? Please make a pull-request to update [`README.md`](https://github.com/muaz-khan/RecordRTC/blob/master/README.md)\r\n\r\n## Tests?\r\n\r\n* https://travis-ci.org/muaz-khan/RecordRTC\r\n\r\nTests source code:\r\n\r\n* https://github.com/muaz-khan/RecordRTC/tree/master/test\r\n\r\n## Free?\r\n\r\nIt is <a href=\"https://www.webrtc-experiment.com/licence/\">MIT Licenced</a>, which means that you can use it in any commercial/non-commercial product, free of cost.\r\n\r\n## RecordRTC Containers Format\r\n\r\n> RecordRTC supports vp9, vp8, h264, mkv, opus/vorbis, and pcm (mono/stereo).\r\n\r\n#### vp9\r\n\r\n```javascript\r\nvar options = {\r\n    recorderType: MediaStreamRecorder,\r\n    mimeType: 'video/webm\\;codecs=vp9'\r\n};\r\nvar recordRTC = RecordRTC(stream, options);\r\n```\r\n\r\n<a href=\"https://www.webrtc-experiment.com/images/RecordRTC-vp9.png\"><img src=\"https://www.webrtc-experiment.com/images/RecordRTC-vp9.png\" alt=\"RecordRTC vp9\" /></a>\r\n\r\n#### vp8\r\n\r\n```javascript\r\nvar options = {\r\n    recorderType: MediaStreamRecorder,\r\n    mimeType: 'video/webm\\;codecs=vp8'\r\n};\r\nvar recordRTC = RecordRTC(stream, options);\r\n```\r\n\r\n<a href=\"https://www.webrtc-experiment.com/images/RecordRTC-vp8.png\"><img src=\"https://www.webrtc-experiment.com/images/RecordRTC-vp8.png\" alt=\"RecordRTC vp8\" /></a>\r\n\r\n#### h264\r\n\r\n```javascript\r\nvar options = {\r\n    recorderType: MediaStreamRecorder,\r\n    mimeType: 'video/webm\\;codecs=h264'\r\n};\r\nvar recordRTC = RecordRTC(stream, options);\r\n```\r\n\r\n<a href=\"https://www.webrtc-experiment.com/images/RecordRTC-h264.png\"><img src=\"https://www.webrtc-experiment.com/images/RecordRTC-h264.png\" alt=\"RecordRTC h264\" /></a>\r\n\r\n#### pcm\r\n\r\n```javascript\r\nvar options = {\r\n    recorderType: StereoAudioRecorder,\r\n    mimeType: 'audio/wav'\r\n};\r\nvar recordRTC = RecordRTC(stream, options);\r\n```\r\n\r\n<a href=\"https://www.webrtc-experiment.com/images/RecordRTC-pcm.png\"><img src=\"https://www.webrtc-experiment.com/images/RecordRTC-pcm.png\" alt=\"RecordRTC pcm\" /></a>\r\n\r\n#### opus\r\n\r\n```javascript\r\nvar options = {\r\n    recorderType: MediaStreamRecorder,\r\n    mimeType: 'audio/webm' // Firefox also supports: \"audio/ogg\"\r\n};\r\nvar recordRTC = RecordRTC(stream, options);\r\n```\r\n\r\n<a href=\"https://www.webrtc-experiment.com/images/RecordRTC-opus.png\"><img src=\"https://www.webrtc-experiment.com/images/RecordRTC-opus.png\" alt=\"RecordRTC opus\" /></a>\r\n\r\n|Media File|Bitrate/Framerate|encoders|Framesize|additional info|\r\n| ------------- |-------------|-------------|-------------|-------------|\r\n|Audio File (WAV) | 1411 kbps | pcm_s16le |44100 Hz|stereo, s16|\r\n|Video File (WebM)|60 kb/s | (whammy) vp8 codec yuv420p|--|SAR 1:1 DAR 4:3, 1k tbr, 1k tbn, 1k tbc (default)|\r\n\r\n## RecordRTC Demos\r\n\r\n1. [RecordRTC to Node.js](https://github.com/muaz-khan/RecordRTC/tree/master/RecordRTC-to-Nodejs)\r\n2. [RecordRTC to PHP](https://github.com/muaz-khan/RecordRTC/tree/master/RecordRTC-to-PHP)\r\n3. [RecordRTC to ASP.NET MVC](https://github.com/muaz-khan/RecordRTC/tree/master/RecordRTC-to-ASPNETMVC)\r\n4. [RecordRTC & HTML-2-Canvas i.e. Canvas/HTML Recording!](https://github.com/muaz-khan/RecordRTC/tree/master/Canvas-Recording)\r\n5. [MRecordRTC i.e. Multi-RecordRTC!](https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC)\r\n6. [RecordRTC on Ruby!](https://github.com/cbetta/record-rtc-experiment)\r\n7. [RecordRTC over Socket.io](https://github.com/muaz-khan/RecordRTC/tree/master/RecordRTC-over-Socketio)\r\n8. [ffmpeg-asm.js and RecordRTC! Audio/Video Merging & Transcoding!](https://github.com/muaz-khan/WebRTC-Experiment/tree/master/ffmpeg)\r\n9. [RecordRTC / PHP / FFmpeg](https://github.com/muaz-khan/RecordRTC/tree/master/PHP-and-FFmpeg)\r\n10. [Record Audio and upload to Nodejs server](https://www.npmjs.org/package/record-audio)\r\n11. [ConcatenateBlobs.js](https://github.com/muaz-khan/ConcatenateBlobs) - Concatenate multiple recordings in single Blob!\r\n12. [Remote audio-stream recording](https://www.webrtc-experiment.com/demos/remote-stream-recording.html) or [a real p2p demo](https://www.webrtc-experiment.com/RTCMultiConnection/RecordRTC-and-RTCMultiConnection.html)\r\n13. [Mp3 or Wav Recording](https://www.webrtc-experiment.com/RecordRTC/Record-Mp3-or-Wav.html)\r\n14. [Record entire DIV including video, image, textarea, input, drag/move/resize, everything](https://www.webrtc-experiment.com/RecordRTC/Canvas-Recording/)\r\n15. [Record canvas 2D drawings, lines, shapes, texts, images, drag/resize/enlarge/move via a huge drawing tool!](https://www.webrtc-experiment.com/RecordRTC/Canvas-Recording/record-canvas-drawings.html)\r\n16. [Record Canvas2D Animation](https://www.webrtc-experiment.com/RecordRTC/Canvas-Recording/Canvas-Animation-Recording.html)\r\n17. [WebGL animation recording](https://www.webrtc-experiment.com/RecordRTC/webgl/)\r\n18. [Plotly - WebGL animation recording](https://www.webrtc-experiment.com/RecordRTC/plotly.html)\r\n\r\nYou can also try a chrome extension for screen recording:\r\n\r\n* https://chrome.google.com/webstore/detail/recordrtc/ndcljioonkecdnaaihodjgiliohngojp\r\n\r\n# How to link?\r\n\r\n## [NPM](https://www.npmjs.com/package/recordrtc) install\r\n\r\n```\r\nnpm install recordrtc\r\n\r\n# you can use with \"require\" (browserify/nodejs)\r\nvar RecordRTC = require('recordrtc');\r\n\r\nvar recorder = RecordRTC({}, {\r\n    type: 'video',\r\n    recorderType: RecordRTC.WhammyRecorder\r\n});\r\n\r\nconsole.log('\\n--------\\nRecordRTC\\n--------\\n');\r\nconsole.log(recorder);\r\n\r\nconsole.log('\\n--------\\nstartRecording\\n--------\\n');\r\nrecorder.startRecording();\r\nconsole.log('\\n--------\\nprocess.exit()\\n--------\\n');\r\n\r\nprocess.exit()\r\n```\r\n\r\n* https://tonicdev.com/npm/recordrtc\r\n\r\nHere is how to use `require`:\r\n\r\n```javascript\r\nvar RecordRTC = require('recordrtc');\r\nvar Whammy = RecordRTC.Whammy;\r\nvar WhammyRecorder = RecordRTC.WhammyRecorder;\r\nvar StereoAudioRecorder = RecordRTC.StereoAudioRecorder;\r\n// and so on\r\n\r\nvar video = new Whammy.Video(100);\r\nvar recorder = new StereoAudioRecorder(stream, options);\r\n```\r\n\r\n```html\r\n<!-- link npm package scripts -->\r\n<script src=\"./node_modules/recordrtc/RecordRTC.js\"></script>\r\n```\r\n\r\nThere are some other NPM packages regarding RecordRTC:\r\n\r\n* [https://www.npmjs.org/search?q=RecordRTC](https://www.npmjs.org/search?q=RecordRTC)\r\n\r\n## [bower](http://bower.io) install\r\n\r\n```\r\nbower install recordrtc\r\n```\r\n\r\n```html\r\n<!-- link bower package scripts -->\r\n<script src=\"./bower_components/recordrtc/RecordRTC.js\"></script>\r\n```\r\n\r\n## CDN\r\n\r\n```html\r\n<!-- CDN -->\r\n<script src=\"https://cdn.WebRTC-Experiment.com/RecordRTC.js\"></script>\r\n\r\n<!-- non-CDN -->\r\n<script src=\"https://www.WebRTC-Experiment.com/RecordRTC.js\"></script>\r\n```\r\n\r\n## Releases\r\n\r\nYou can even link specific [releases](https://github.com/muaz-khan/RecordRTC/releases):\r\n\r\n```html\r\n<!-- use 5.4.6 or any other version -->\r\n<script src=\"https://github.com/muaz-khan/RecordRTC/releases/download/5.4.6/RecordRTC.js\"></script>\r\n```\r\n\r\n## How to capture stream?\r\n\r\n```html\r\n<script src=\"https://cdn.webrtc-experiment.com/gumadapter.js\"></script>\r\n\r\n<script>\r\nfunction successCallback(stream) {\r\n    // RecordRTC usage goes here\r\n}\r\n\r\nfunction errorCallback(error) {\r\n    // maybe another application is using the device\r\n}\r\n\r\nvar mediaConstraints = { video: true, audio: true };\r\n\r\nnavigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);\r\n</script>\r\n```\r\n\r\n## Record audio+video\r\n\r\nYou'll be recording both audio/video in single WebM or Mp4 container.\r\n\r\n```javascript\r\nvar recordRTC;\r\n\r\nfunction successCallback(stream) {\r\n    // RecordRTC usage goes here\r\n\r\n    var options = {\r\n      mimeType: 'video/webm', // or video/webm\\;codecs=h264 or video/webm\\;codecs=vp9\r\n      audioBitsPerSecond: 128000,\r\n      videoBitsPerSecond: 128000,\r\n      bitsPerSecond: 128000 // if this line is provided, skip above two\r\n    };\r\n    recordRTC = RecordRTC(stream, options);\r\n    recordRTC.startRecording();\r\n}\r\n\r\nfunction errorCallback(error) {\r\n    // maybe another application is using the device\r\n}\r\n\r\nvar mediaConstraints = { video: true, audio: true };\r\n\r\nnavigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);\r\n\r\nbtnStopRecording.onclick = function () {\r\n    recordRTC.stopRecording(function (audioVideoWebMURL) {\r\n        video.src = audioVideoWebMURL;\r\n\r\n        var recordedBlob = recordRTC.getBlob();\r\n        recordRTC.getDataURL(function(dataURL) { });\r\n    });\r\n};\r\n```\r\n\r\n## Record only Audio\r\n\r\n```javascript\r\nvar recordRTC = RecordRTC(audioStream, { type: 'audio' });\r\nrecordRTC.startRecording();\r\nrecordRTC.stopRecording(function(audioURL) {\r\n    audio.src = audioURL;\r\n\r\n    var recordedBlob = recordRTC.getBlob();\r\n    recordRTC.getDataURL(function(dataURL) { });\r\n});\r\n```\r\n\r\n## `options`\r\n\r\nRecordRTC requires a second parameter named as `options` or `configuration` or `hints` or `preferences`:\r\n\r\n```javascript\r\nvar options = {\r\n    recorderType: MediaStreamRecorder,\r\n    mimeType: 'video/webm\\;codecs=vp9'\r\n};\r\nvar recordRTC = RecordRTC(stream, options);\r\n```\r\n\r\nYou can pass `options` object over `startRecording` method as well:\r\n\r\n```javascript\r\nvar recordRTC = RecordRTC(stream);\r\n\r\nvar options = {\r\n    recorderType: MediaStreamRecorder,\r\n    mimeType: 'video/webm\\;codecs=vp9'\r\n};\r\nrecordRTC.startRecording(options);\r\n```\r\n\r\n* `type` accepts `video` or `audio` or `canvas` or `gif`\r\n* `mimeType` accepts [all these values](https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/mimeType)\r\n* `recorderType` accepts `MediaStreamRecorder` or `StereoAudioRecorder` or `WhammyRecorder` or `GifRecorder` or any recorder type from [this page](https://github.com/muaz-khan/RecordRTC/tree/master/dev)\r\n* `timeSlice` accepts numbers in milliseconds; use this to force intervals-based blobs\r\n* `ondataavailable` pass this function along with `timeSlice` to get intervals based blobs\r\n* `checkForInactiveTracks` accepts `true` or `false`; use this to disable default inactive-stream-checker functions\r\n* `onTimeStamp` it is a function that is called-back by the MediaStreamRecorder; `timeSlice` parameter is required for this function\r\n* `bitsPerSecond` accepts numbers in bits; applies both to audio and video tracks\r\n* `audioBitsPerSecond` accepts numbers in bits; applies only to audio tracks\r\n* `videoBitsPerSecond` accepts numbers in bits; applies only to video tracks\r\n* `disableLogs` accepts `true` or `false`; use this to disable console logs\r\n* `frameInterval` accepts numbers in milliseconds; use this with MultiStreamRecorder, CanvasRecorder and WhammyRecorder\r\n* `previewStream` it is a function that is called-back by the MultiStreamRecorder\r\n* `video` accepts object similar to this: `{width: 320, height: 240}`; pass this parameter for MultiStreamRecorder, CanvasRecorder and WhammyRecorder\r\n* `canvas` accepts object similar to this: `{width: 320, height: 240}`; pass this parameter for MultiStreamRecorder, CanvasRecorder and WhammyRecorder\r\n* `sampleRate` used only by the StereoAudioRecorder\r\n* `bufferSize` used only by the StereoAudioRecorder\r\n* `numberOfAudioChannels` used only by the StereoAudioRecorder\r\n\r\n## Record Multiple Videos\r\n\r\nDemos:\r\n\r\n1. [Record all your cameras](https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/multi-cameras-recording.html)\r\n2. [Record screen as well as your video!](https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/video-plus-screen-recording.html)\r\n\r\nYou can record many videos/streams in single WebM/Mp4 file (**WebRTC Conference Recording**):\r\n\r\n```javascript\r\nvar arrayOfStreams = [localStream, remoteStream1, remoteStream2, remoteStream3];\r\n\r\nvar recordRTC = RecordRTC(arrayOfStreams, {\r\n  type: 'video',\r\n  mimeType: 'video/webm', // or video/webm\\;codecs=h264 or video/webm\\;codecs=vp9\r\n  previewStream: function(stream) {\r\n    // it is optional\r\n    // it allows you preview the recording video\r\n  }\r\n});\r\nrecordRTC.startRecording();\r\nrecordRTC.stopRecording(function(singleWebM) {\r\n    video.src = singleWebM;\r\n\r\n    var recordedBlob = recordRTC.getBlob();\r\n    recordRTC.getDataURL(function(dataURL) { });\r\n});\r\n```\r\n\r\nPoints:\r\n\r\n1. Instead of passing single `MediaStream`, you are passing array of `MediaStreams`\r\n2. You will get single webm or mp4 according to your `mimeType`\r\n\r\n`MultiStreamRecorder.js` supports two extra methods:\r\n\r\n1. `addStreams`\r\n2. `resetVideoStreams`\r\n\r\n```javascript\r\nvar msRecorder = recorder.getInternalRecorder();\r\nif (msRecorder instanceof MultiStreamRecorder) {\r\n    msRecorder.addStreams([newAudioStream]);\r\n    msRecorder.resetVideoStreams([screenStream]);\r\n}\r\n```\r\n\r\nUsecases:\r\n\r\n1. You can add more audio and/or video streams during live recording (using `addStreams` method)\r\n2. You can reset/remove/replace old videos using `resetVideoStreams`\r\n\r\n`resetVideoStreams` can be used to recorded screenStream in full-screen mode e.g.\r\n\r\n```javascript\r\nif (yourScreen.isScreen === true) {\r\n    yourScreen.fullcanvas = true;\r\n    yourScreen.width = window.screen.width;\r\n    yourScreen.height = window.screen.height;\r\n\r\n    // now it will record all audios + only_this_screen\r\n    internalRecorder.resetVideoStreams([yourScreen]);\r\n}\r\n```\r\n\r\nAs soon as [screen is stopped](https://www.webrtc-experiment.com/webrtcpedia/#stream-ended-listener):\r\n\r\n```javascript\r\naddStreamStopListener(yourScreen, function() {\r\n    var cameraStreams = getSingleOrMultipleCameraStreams();\r\n\r\n    // now it will record all audios + all_your_cameras\r\n    internalRecorder.resetVideoStreams(cameraStreams);\r\n});\r\n```\r\n\r\n## `getInternalRecorder`\r\n\r\nYou can get access to internal recorders e.g. MultiStreamRecorder, MediaStreamRecorder, StereoAudioRecorder, WhammyRecorder etc.\r\n\r\n> Use `getInternalRecorder` only after `startRecording`. It may return `NULL` according to RecordRTC current state.\r\n\r\n```javascript\r\n// if RecordRTC recording in-progress\r\nif (recorder.state === 'recording') {\r\n    // get MediaStreamRecorder\r\n    var msRecorder = recorder.getInternalRecorder();\r\n\r\n    // always check for NULL or verify the recorder type\r\n    if (msRecorder instanceof MultiStreamRecorder) {\r\n        // it is NOT NULL\r\n        // also it is MultiStreamRecorder instance\r\n        // now we can use these extra methods\r\n        msRecorder.addStreams([newAudioStream]);\r\n        msRecorder.resetVideoStreams([screenStream]);\r\n    }\r\n}\r\n```\r\n\r\nInternal recorders can add extra methods. Same as MultiStreamRecorder which is supporting two extra methods:\r\n\r\n1. `addStreams`\r\n2. `resetVideoStreams`\r\n\r\n## `onStateChanged`\r\n\r\nUse this method to detect status of the recording:\r\n\r\n```javascript\r\nrecorder = RecordRTC(stream, {\r\n    type: 'video',\r\n    onStateChanged: function(state) {\r\n        alert('Current recorder status: ' + state);\r\n    }\r\n});\r\n\r\nrecorder.startRecording();\r\n```\r\n\r\n## `state`\r\n\r\nUse this property to detect status of the recording:\r\n\r\n```javascript\r\nrecorder = RecordRTC(stream, {\r\n    type: 'video'\r\n});\r\n\r\nalert('Current recorder status: ' + recorder.state);\r\n\r\nrecorder.startRecording();\r\n\r\nalert('Current recorder status: ' + recorder.state);\r\n\r\nrecorder.stopRecording(function() {\r\n    alert('Current recorder status: ' + recorder.state);\r\n});\r\n```\r\n\r\nYou can even use `getState` method:\r\n\r\n```javascript\r\nalert('Current recorder status: ' + recorder.getState());\r\n```\r\n\r\n## `version`\r\n\r\nDetect current RecordRTC version:\r\n\r\n```javascript\r\nrecorder = RecordRTC(stream, {\r\n    type: 'video'\r\n});\r\n\r\nalert('Current recorder version: ' + recorder.version);\r\n```\r\n\r\nYou can even use `RecordRTC.version`:\r\n\r\n```javascript\r\nalert('Current recorder version: ' + RecordRTC.version);\r\n```\r\n\r\n## Echo Issues\r\n\r\nSimply set `volume=0` or `muted=true` over `<audio>` or `<video>` element:\r\n\r\n```javascript\r\nvideoElement.muted = true;\r\naudioElement.muted = true;\r\n```\r\n\r\nOtherwise, you can pass some media constraints:\r\n\r\n```javascript\r\nfunction successCallback(stream) {\r\n    // RecordRTC usage goes here\r\n}\r\n\r\nfunction errorCallback(error) {\r\n    // maybe another application is using the device\r\n}\r\n\r\nvar mediaConstraints = {\r\n    audio: {\r\n        mandatory: {\r\n            echoCancellation: false,\r\n            googAutoGainControl: false,\r\n            googNoiseSuppression: false,\r\n            googHighpassFilter: false\r\n        },\r\n        optional: [{\r\n          googAudioMirroring: false\r\n        }]\r\n    },\r\n};\r\n\r\nnavigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);\r\n```\r\n\r\n* [Constraints Reference](https://chromium.googlesource.com/external/webrtc/+/master/talk/app/webrtc/mediaconstraintsinterface.cc)\r\n\r\n## Record Video\r\n\r\nEverything is optional except `type:'video'`:\r\n\r\n```javascript\r\nvar options = {\r\n   type: 'video',\r\n   frameInterval: 20 // minimum time between pushing frames to Whammy (in milliseconds)\r\n};\r\nvar recordRTC = RecordRTC(mediaStream, options);\r\nrecordRTC.startRecording();\r\nrecordRTC.stopRecording(function(videoURL) {\r\n    video.src = videoURL;\r\n\r\n    var recordedBlob = recordRTC.getBlob();\r\n    recordRTC.getDataURL(function(dataURL) { });\r\n});\r\n```\r\n\r\n## Record animated GIF image\r\n\r\nEverything is optional except `type:'gif'`:\r\n\r\n```javascript\r\n// you must \"manually\" link:\r\n// https://cdn.webrtc-experiment.com/gif-recorder.js\r\n\r\nvar options = {\r\n   type: 'gif',\r\n   frameRate: 200,\r\n   quality: 10\r\n};\r\nvar recordRTC = RecordRTC(mediaStream || canvas || context, options);\r\nrecordRTC.startRecording();\r\nrecordRTC.stopRecording(function(gifURL) {\r\n   mediaElement.src = gifURL;\r\n});\r\n```\r\n\r\n## Record a Webpage\r\n\r\nYou can say it: \"HTML/Canvas Recording using RecordRTC\"!\r\n\r\n```html\r\n<script src=\"https://cdn.WebRTC-Experiment.com/RecordRTC.js\"></script>\r\n<script src=\"https://cdn.webrtc-experiment.com/screenshot.js\"></script>\r\n\r\n<div id=\"elementToShare\" style=\"width:100%;height:100%;background:green;\"></div>\r\n<script>\r\nvar elementToShare = document.getElementById('elementToShare');\r\nvar recordRTC = RecordRTC(elementToShare, {\r\n    type: 'canvas'\r\n});\r\nrecordRTC.startRecording();\r\nrecordRTC.stopRecording(function(videoURL) {\r\n    video.src = videoURL;\r\n\r\n    var recordedBlob = recordRTC.getBlob();\r\n    recordRTC.getDataURL(function(dataURL) { });\r\n});\r\n</script>\r\n```\r\n\r\nSee a demo: [/Canvas-Recording/](https://www.webrtc-experiment.com/RecordRTC/Canvas-Recording/)\r\n\r\n## Record `<canvas>`\r\n\r\nYou can even record Canvas2D drawings:\r\n\r\n```html\r\n<script src=\"https://cdn.webrtc-experiment.com/RecordRTC/Whammy.js\"></script>\r\n<script src=\"https://cdn.webrtc-experiment.com/RecordRTC/CanvasRecorder.js\"></script>\r\n<canvas></canvas>\r\n<script>\r\nvar canvas = document.querySelector('canvas');\r\nvar recorder = new CanvasRecorder(window.canvasElementToBeRecorded, {\r\n    disableLogs: false\r\n});\r\n\r\n// start recording <canvas> drawings\r\nrecorder.record();\r\n\r\n// a few minutes later\r\nrecorder.stop(function(blob) {\r\n    var url = URL.createObjectURL(blob);\r\n    window.open(url);\r\n});\r\n</script>\r\n```\r\n\r\nLive Demo:\r\n\r\n* https://www.webrtc-experiment.com/RecordRTC/Canvas-Recording/record-canvas-drawings.html\r\n\r\nWatch a video: https://vimeo.com/152119435\r\n\r\n# API Reference\r\n\r\n## `initRecorder`\r\n\r\nIt is a function that can be used to initiate recorder however skip getting recording outputs. It will provide maximum accuracy in the outputs after using `startRecording` method. Here is how to use it:\r\n\r\n```javascript\r\nvar audioRecorder = RecordRTC(mediaStream, {\r\n  recorderType: StereoAudioRecorder\r\n});\r\n\r\nvar videoRecorder = RecordRTC(mediaStream, {\r\n  recorderType: WhammyRecorder\r\n});\r\n\r\nvideoRecorder.initRecorder(function() {\r\n  audioRecorder.initRecorder(function() {\r\n    // Both recorders are ready to record things accurately\r\n    videoRecorder.startRecording();\r\n    audioRecorder.startRecording();\r\n  });\r\n});\r\n```\r\n\r\nAfter using `stopRecording`, you'll see that both WAV/WebM blobs are having following charachteristics:\r\n\r\n1. Both are having same recording duration i.e. length\r\n2. Video recorder is having no blank frames\r\n3. Audio recorder is having no empty buffers\r\n\r\nThis method is really useful to sync audio/video outputs.\r\n\r\n## `setRecordingDuration`\r\n\r\nYou can ask RecordRTC to auto stop recording after specific duration. It accepts one mandatory and one optional argument:\r\n\r\n```javascript\r\nrecordRTC.setRecordingDuration(milliseconds, stoppedCallback);\r\n\r\n// the easiest one:\r\nrecordRTC.setRecordingDuration(milliseconds).onRecordingStopped(stoppedCallback);\r\n```\r\n\r\nTry a simple demo; paste in the chrome console:\r\n\r\n```javascript\r\nnavigator.mediaDevices.getUserMedia({\r\n    video: true\r\n}).then(function(stream) {\r\n    var recordRTC = RecordRTC(stream, {\r\n        recorderType: WhammyRecorder\r\n    });\r\n\r\n    // auto stop recording after 5 seconds\r\n    recordRTC.setRecordingDuration(5 * 1000).onRecordingStopped(function(url) {\r\n        console.debug('setRecordingDuration', url);\r\n        window.open(url);\r\n    })\r\n\r\n    recordRTC.startRecording();\r\n}).catch(function(error) {\r\n    console.error(error);\r\n});\r\n```\r\n\r\n## `clearRecordedData`\r\n\r\nThis method can be used to clear old recorded frames/buffers. Snippet:\r\n\r\n```javascript\r\nrecorder.clearRecordedData();\r\n```\r\n\r\n## `recorderType`\r\n\r\nIf you're using `recorderType` then you don't need to use `type`. Second one will be redundant i.e. skipped.\r\n\r\nYou can force any Recorder by passing this object over RecordRTC constructor:\r\n\r\n```javascript\r\nvar audioRecorder = RecordRTC(mediaStream, {\r\n  recorderType: StereoAudioRecorder\r\n})\r\n```\r\n\r\nIt means that ALL_BROWSERS will be using [StereoAudioRecorder](http://RecordRTC.org/StereoAudioRecorder.html) i.e. WebAudio API for audio recording.\r\n\r\nThis feature brings remote audio recording support in Firefox, and local audio recording support in Microsoft Edge.\r\n\r\nNote: Chrome `>=50` supports remote audio+video recording.\r\n\r\nYou can even force `WhammyRecorder` on Firefox however webp format isn't yet supported in standard Firefox builds. It simply means that, you're skipping MediaRecorder API in Firefox.\r\n\r\n## `type`\r\n\r\nIf you are NOT using `recorderType` parameter then `type` parameter can be used to ask RecordRTC choose best recorder-type for recording.\r\n\r\n```javascript\r\n// if it is Firefox, then RecordRTC will be using MediaStreamRecorder.js\r\n// if it is Chrome or Opera, then RecordRTC will be using WhammyRecorder.js\r\nvar recordVideo = RecordRTC(mediaStream, {\r\n  type: 'video'\r\n});\r\n\r\n// if it is Firefox, then RecordRTC will be using MediaStreamRecorder.js\r\n// if it is Chrome or Opera or Edge, then RecordRTC will be using StereoAudioRecorder.js\r\nvar recordVideo = RecordRTC(mediaStream, {\r\n  type: 'audio'\r\n});\r\n```\r\n\r\n## `frameInterval`\r\n\r\nSet minimum interval (in milliseconds) between each time we push a frame to Whammy recorder.\r\n\r\n```javascript\r\nvar whammyRecorder = RecordRTC(videoStream, {\r\n  recorderType: WhammyRecorder,\r\n  frameInterval: 1   // setTimeout interval\r\n});\r\n```\r\n\r\n## `disableLogs`\r\n\r\nYou can disable all the RecordRTC logs by passing this Boolean:\r\n\r\n```javascript\r\nvar recorder = RecordRTC(mediaStream, {\r\n  disableLogs: true\r\n});\r\n```\r\n\r\n## `numberOfAudioChannels`\r\n\r\nYou can force [StereoAudioRecorder](http://RecordRTC.org/StereoAudioRecorder.html) to record single-audio-channel only. It allows you reduce WAV file size to half.\r\n\r\n```javascript\r\nvar audioRecorder = RecordRTC(audioStream, {\r\n  recorderType: StereoAudioRecorder,\r\n  numberOfAudioChannels: 1 // or leftChannel:true\r\n});\r\n```\r\n\r\n**It will reduce WAV size to half!**\r\n\r\nThis feature is useful only in Chrome and Microsoft Edge (WAV-recorders). It can work in Firefox as well.\r\n\r\n## How to set video width/height?\r\n\r\n```javascript\r\nvar options = {\r\n   type: 'video',\r\n   video: {\r\n      width: 320,\r\n      height: 240\r\n   },\r\n   canvas: {\r\n      width: 320,\r\n      height: 240\r\n   }\r\n};\r\n\r\nvar recordVideo = RecordRTC(MediaStream, options);\r\n```\r\n\r\n## `pauseRecording`\r\n\r\n> Note: Firefox seems has a bug. It is unable to pause the recording. Seems internal bug because they correctly changes `mediaRecorder.state` from `recording` to `paused` but they are unable to pause internal recorders.\r\n\r\nRecordRTC pauses recording buffers/frames.\r\n\r\n```javascript\r\nrecordRTC.pauseRecording();\r\n```\r\n\r\n## `resumeRecording`\r\n\r\nIf you're using \"initRecorder\" then it asks RecordRTC that now its time to record buffers/frames. Otherwise, it asks RecordRTC to not only initialize recorder but also record buffers/frames.\r\n\r\n```javascript\r\nrecordRTC.resumeRecording();\r\n```\r\n\r\n## `getDataURL`\r\n\r\nOptionally get \"DataURL\" object instead of \"Blob\".\r\n\r\n```javascript\r\nrecordRTC.getDataURL(function(dataURL) {\r\n   mediaElement.src = dataURL;\r\n});\r\n```\r\n\r\n## `getBlob`\r\n\r\nGet \"Blob\" object. A blob object looks similar to `input[type=file]`. Which means that you can append it to `FormData` and upload to server using XMLHttpRequest object. Even socket.io nowadays supports blob-transmission.\r\n\r\n```javascript\r\nblob = recordRTC.getBlob();\r\n```\r\n\r\n## `toURL`\r\n\r\nA virtual URL. It can be used only inside the same browser. You can't share it. It is just providing a preview of the recording.\r\n\r\n```javascript\r\nwindow.open( recordRTC.toURL() );\r\n```\r\n\r\n## `save`\r\n\r\nInvoke save-as dialog. You can pass \"fileName\" as well; though fileName argument is optional.\r\n\r\n```javascript\r\nrecordRTC.save('File Name');\r\n```\r\n\r\n## `bufferSize`\r\n\r\nHere is how to customize Buffer-Size for audio recording?\r\n\r\n```javascript\r\n// From the spec: This value controls how frequently the audioprocess event is\r\n// dispatched and how many sample-frames need to be processed each call.\r\n// Lower values for buffer size will result in a lower (better) latency.\r\n// Higher values will be necessary to avoid audio breakup and glitches\r\n// bug: how to minimize wav size?\r\n// workaround? obviously ffmpeg!\r\n// The size of the buffer (in sample-frames) which needs to\r\n// be processed each time onprocessaudio is called.\r\n\r\n// Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\r\n\r\nvar options = {\r\n   type: 'audio',\r\n   recorderType: StereoAudioRecorder,\r\n   bufferSize: 16384\r\n};\r\nvar recordRTC = RecordRTC(audioStream, options);\r\n```\r\n\r\nFollowing values are allowed for buffer-size:\r\n\r\n```javascript\r\n// Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384)\r\n```\r\n\r\nIf you passed invalid value then you'll get blank audio.\r\n\r\n## `sampleRate`\r\n\r\nHere is how to customize Sample-Rate for audio recording?\r\n\r\n```javascript\r\n// The sample rate (in sample-frames per second) at which the\r\n// AudioContext handles audio. It is assumed that all AudioNodes\r\n// in the context run at this rate. In making this assumption,\r\n// sample-rate converters or \"varispeed\" processors are not supported\r\n// in real-time processing.\r\n// The sampleRate parameter describes the sample-rate of the\r\n// linear PCM audio data in the buffer in sample-frames per second.\r\n\r\n// An implementation must support sample-rates in at least\r\n// the range 22050 to 96000.\r\n\r\nvar options = {\r\n   type: 'audio',\r\n   recorderType: StereoAudioRecorder,\r\n   sampleRate: 96000\r\n};\r\nvar recordRTC = RecordRTC(audioStream, options);\r\n```\r\n\r\nValues for sample-rate must be greater than or equal to 22050 and less than or equal to 96000.\r\n\r\nIf you passed invalid value then you'll get blank audio.\r\n\r\nYou can pass custom sample-rate values only on Mac (or additionally maybe on Windows 10).\r\n\r\n## `desiredSampRate`\r\n\r\nSet sample rates such as 8K or 16K. Reference: http://stackoverflow.com/a/28977136/552182\r\n\r\n```javascript\r\n// record 16khz audio\r\nvar options = {\r\n   type: 'audio',\r\n   recorderType: StereoAudioRecorder,\r\n   desiredSampRate: 16 * 1000 // bits-per-sample * 1000\r\n};\r\nvar recordRTC = RecordRTC(audioStream, options);\r\n```\r\n\r\n## `mimeType`\r\n\r\nThis option allows you set MediaRecorder output format:\r\n\r\n```javascript\r\nvar options = {\r\n  mimeType: 'video/webm', // or video/webm\\;codecs=h264 or video/webm\\;codecs=vp9\r\n  bitsPerSecond: 128000\r\n};\r\nvar recorder = RecordRTC(mediaStream, options);\r\n```\r\n\r\nNote: For chrome, it will simply auto-set `type:audio or video` parameters to keep supporting `StereoAudioRecorder.js` and `WhammyRecorder.js`.\r\n\r\nThat is, you can skip passing `type:audio` parameter when you're using `mimeType` parameter.\r\n\r\n## `isMimeTypeSupported`\r\n\r\n```javascript\r\nfunction isMimeTypeSupported(mimeType) {\r\n    // if (webrtcDetectedBrowser === 'edge') return false;\r\n\r\n    if (typeof MediaRecorder.isTypeSupported !== 'function') {\r\n        return true;\r\n    }\r\n\r\n    return MediaRecorder.isTypeSupported(mimeType);\r\n}\r\n```\r\n\r\n**Detect Audio Formats:**\r\n\r\n```javascript\r\nvar mimeType = 'audio/mpeg';\r\nvar recorderType = MediaStreamRecorder;\r\n\r\nif (isMimeTypeSupported(mimeType) === false) {\r\n    console.log(mimeType, 'is not supported.');\r\n    mimeType = 'audio/ogg';\r\n\r\n    if (isMimeTypeSupported(mimeType) === false) {\r\n        console.log(mimeType, 'is not supported.');\r\n        mimeType = 'audio/webm';\r\n\r\n        if (isMimeTypeSupported(mimeType) === false) {\r\n            console.log(mimeType, 'is not supported.');\r\n\r\n            // fallback to WebAudio solution\r\n            mimeType = 'audio/wav';\r\n            recorderType = StereoAudioRecorder;\r\n        }\r\n    }\r\n}\r\n\r\nvar recorder = RecordRTC(mediaStream, {\r\n    mimeType: mimeType,\r\n    recorderType: recorderType\r\n});\r\n```\r\n\r\n**Detect Video Formats:**\r\n\r\n```javascript\r\nvar mimeType = 'video/x-matroska;codecs=avc1'; // MKV\r\nvar recorderType = MediaStreamRecorder;\r\n\r\nif (isMimeTypeSupported(mimeType) === false) {\r\n    console.log(mimeType, 'is not supported.');\r\n    mimeType = 'video/webm\\;codecs=h264'; // H264\r\n\r\n    if (isMimeTypeSupported(mimeType) === false) {\r\n        console.log(mimeType, 'is not supported.');\r\n        mimeType = 'video/webm\\;codecs=vp9'; // VP9\r\n\r\n        if (isMimeTypeSupported(mimeType) === false) {\r\n            console.log(mimeType, 'is not supported.');\r\n            mimeType = 'video/webm\\;codecs=vp8'; // VP8\r\n\r\n            if (isMimeTypeSupported(mimeType) === false) {\r\n                console.log(mimeType, 'is not supported.');\r\n                mimeType = 'video/webm'; // do NOT pass any codecs (vp8 by default)\r\n\r\n                if (isMimeTypeSupported(mimeType) === false) {\r\n                    console.log(mimeType, 'is not supported.');\r\n\r\n                    // fallback to Whammy (WebP+WebM) solution\r\n                    mimeType = 'video/webm';\r\n                    recorderType = WhammyRecorder;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar recorder = RecordRTC(mediaStream, {\r\n    mimeType: mimeType,\r\n    recorderType: recorderType\r\n});\r\n```\r\n\r\n## `bitsPerSecond`\r\n\r\nThe chosen bitrate for the audio and video components of the media. If this is specified along with one or the other of the above properties, this will be used for the one that isn't specified.\r\n\r\n```javascript\r\nvar options = {\r\n  mimeType 'video/webm', // or video/mp4 or audio/ogg\r\n  bitsPerSecond: 128000\r\n};\r\nvar recorder = RecordRTC(mediaStream, options);\r\n```\r\n\r\n## `audioBitsPerSecond`\r\n\r\nThe chosen bitrate for the audio component of the media.\r\n\r\n```javascript\r\nvar options = {\r\n  mimeType 'audio/ogg',\r\n  audioBitsPerSecond: 128000\r\n};\r\nvar recorder = RecordRTC(mediaStream, options);\r\n```\r\n\r\n## `videoBitsPerSecond`\r\n\r\nThe chosen bitrate for the video component of the media.\r\n\r\n```javascript\r\nvar options = {\r\n  mimeType 'video/webm', // or video/mp4\r\n  videoBitsPerSecond: 128000\r\n};\r\nvar recorder = RecordRTC(mediaStream, options);\r\n```\r\n\r\n## `onAudioProcessStarted`\r\n\r\nNote: \"initRecorder\" is preferred over this old hack. Both works similarly.\r\n\r\nUseful to recover audio/video sync issues inside the browser:\r\n\r\n```javascript\r\nrecordAudio = RecordRTC( stream, {\r\n     onAudioProcessStarted: function( ) {\r\n         recordVideo.startRecording();\r\n     }\r\n});\r\n\r\nrecordVideo = RecordRTC(stream, {\r\n    type: 'video'\r\n});\r\n\r\nrecordAudio.startRecording();\r\n```\r\n\r\n`onAudioProcessStarted` fixes shared/exclusive audio gap (a little bit). Because shared audio sometimes causes 100ms delay...\r\nsometime about 400-to-500 ms delay.\r\nDelay depends upon number of applications concurrently requesting same audio devices and CPU/Memory available.\r\nShared mode is the only mode currently available on 90% of windows systems especially on windows 7.\r\n\r\n## `autoWriteToDisk`\r\n\r\nUsing `autoWriteToDisk`; you can suggest RecordRTC to auto-write to indexed-db as soon as you call `stopRecording` method.\r\n\r\n```javascript\r\nvar recordRTC = RecordRTC(MediaStream, {\r\n    autoWriteToDisk: true\r\n});\r\n```\r\n\r\n`autoWriteToDisk` is helpful for single stream recording and writing to disk; however for `MRecordRTC`; `writeToDisk` is preferred one.\r\n\r\n## `writeToDisk`\r\n\r\nYou can write recorded blob to disk using `writeToDisk` method:\r\n\r\n```javascript\r\nrecordRTC.stopRecording();\r\nrecordRTC.writeToDisk();\r\n```\r\n\r\n## `getFromDisk`\r\n\r\nYou can get recorded blob from disk using `getFromDisk` method:\r\n\r\n```javascript\r\n// get all blobs from disk\r\nRecordRTC.getFromDisk('all', function(dataURL, type) {\r\n   type == 'audio'\r\n   type == 'video'\r\n   type == 'gif'\r\n});\r\n\r\n// or get just single blob\r\nRecordRTC.getFromDisk('audio', function(dataURL) {\r\n   // only audio blob is returned from disk!\r\n});\r\n```\r\n\r\nFor [MRecordRTC](https://RecordRTC.org/MRecordRTC.html); you can use word `MRecordRTC` instead of `RecordRTC`!\r\n\r\nAnother possible situation!\r\n\r\n```javascript\r\nvar recordRTC = RecordRTC(mediaStream);\r\nrecordRTC.startRecording();\r\nrecordRTC.stopRecording(function(audioURL) {\r\n   mediaElement.src = audioURL;\r\n});\r\n\r\n// \"recordRTC\" instance object to invoke \"getFromDisk\" method!\r\nrecordRTC.getFromDisk(function(dataURL) {\r\n   // audio blob is automaticlaly returned from disk!\r\n});\r\n```\r\n\r\nIn the above example; you can see that `recordRTC` instance object is used instead of global `RecordRTC` object.\r\n\r\n## `destroy`\r\n\r\nDestroy all internal recorders. Clear memory and ask RecordRTC to stop doing anything internally:\r\n\r\n```javascript\r\nrecorder.destroy();\r\n```\r\n\r\nNote: You can use this method anytime, anywhere; even during recording a stream.\r\n\r\n## Promises\r\n\r\n```html\r\n<script src=\"https://cdn.WebRTC-Experiment.com/RecordRTC.js\"></script>\r\n\r\n<script>\r\n// use \"RecordRTCPromisesHandler\" instead of \"RecordRTC\"\r\nvar recorder = new RecordRTCPromisesHandler(mediaStream, options);\r\nrecorder.startRecording().then(function() {\r\n\r\n}).catch(function(error) {\r\n    //\r\n});\r\n\r\nrecorder.stopRecording().then(function(url) {\r\n    var blob = recorder.blob;\r\n\r\n    recorder.getDataURL().then(function(dataURL) {\r\n        //\r\n    }).catch(function(error) {})\r\n}).catch(function(error) {\r\n    //\r\n});\r\n</script>\r\n```\r\n\r\nDemo:\r\n\r\n* [simple-demos/RecordRTCPromisesHandler.html](https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/RecordRTCPromisesHandler.html)\r\n\r\n## Credits\r\n\r\n1. [Recorderjs](https://github.com/mattdiamond/Recorderjs) for audio recording\r\n2. [whammy](https://github.com/antimatter15/whammy) for video recording\r\n3. [jsGif](https://github.com/antimatter15/jsgif) for gif recording\r\n\r\n## Spec & Reference\r\n\r\n1. [MediaRecorder API](https://w3c.github.io/mediacapture-record/MediaRecorder.html)\r\n2. [Web Audio API](https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html)\r\n3. [Canvas2D](http://www.w3.org/html/wg/drafts/2dcontext/html5_canvas/)\r\n4. [Media Capture and Streams](http://www.w3.org/TR/mediacapture-streams/)\r\n\r\n## Contribute in [RecordRTC.org](http://RecordRTC.org) domain\r\n\r\nThe domain http://RecordRTC.org is open-sourced here:\r\n\r\n* https://github.com/muaz-khan/RecordRTC/tree/gh-pages\r\n\r\n## Issues/Questions?\r\n\r\n* Stackoverflow: http://stackoverflow.com/questions/tagged/recordrtc\r\n* Github: https://github.com/muaz-khan/RecordRTC/issues\r\n* Disqus: https://www.webrtc-experiment.com/RecordRTC/#ask\r\n* Email: muazkh@gmail.com\r\n\r\n# Travis Failed?\r\n\r\nSteps to fix it (for your private projects only):\r\n\r\nModify `package.json` and search this line:\r\n\r\n```json\r\n{\r\n    \"test\": \"./node_modules/.bin/protractor test/browserstack.config.js\"\r\n}\r\n```\r\n\r\nReplace it with (i.e. ignore all \"test\"):\r\n\r\n```json\r\n{\r\n    \"test\": \"node npm-test.js\"\r\n}\r\n```\r\n\r\nWhy? Reason is this file: `test/browserstack.config.js`\r\n\r\n```javascript\r\n'browserstack.user': process.env.BROWSERSTACK_USERNAME,\r\n'browserstack.key': process.env.BROWSERSTACK_KEY,\r\n```\r\n\r\n**Your travis do NOT have these environment variables. That's why your travis builds fails.**\r\n\r\nMore info: https://github.com/muaz-khan/RecordRTC/pull/283#issuecomment-308757116\r\n\r\n> Caution: NEVER make pull-request for modified `package.json`. Modify this file only for your own private projects.\r\n\r\n# Tests sponsored by\r\n\r\n<a href=\"https://www.browserstack.com\"><img src=\"https://webrtcweb.com/browserstack.svg\" height=\"32px\" /></a>\r\n\r\n**Check all tests here:** https://travis-ci.org/muaz-khan/RecordRTC\r\n\r\n**Source code:** https://github.com/muaz-khan/RecordRTC/tree/master/test\r\n\r\n## License\r\n\r\n[RecordRTC.js](https://github.com/muaz-khan/RecordRTC) is released under [MIT licence](https://www.webrtc-experiment.com/licence/) . Copyright (c) [Muaz Khan](http://www.MuazKhan.com).\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/muaz-khan/RecordRTC.git"
  },
  "scripts": {
    "start": "node server.js",
    "test": "protractor test/browserstack.config.js"
  },
  "tonicExampleFilename": "npm-test.js",
  "version": "5.4.6"
}
