/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import ResizeObserver from 'resize-observer-polyfill';
import { Observable } from 'rxjs';
import { debounceTime, tap, finalize } from 'rxjs/operators';
/**
 * An observable creator for element resize.
 * @param {?} elm the watch element.
 * @param {?} cb when resize complete, call back function.
 * @param {?=} time resize emit time, default is 200
 * @return {?}
 */
export function resizeObservable(elm, cb, time = 200) {
    let /** @type {?} */ elmObserve$;
    return Observable.create((observer) => {
        elmObserve$ = new ResizeObserver((entries, obs) => {
            observer.next(elmObserve$);
        });
        elmObserve$.observe(elm);
    }).pipe(debounceTime(time), tap(() => {
        cb();
    }), finalize(() => {
        elmObserve$.unobserve(elm);
        elmObserve$.disconnect();
    }));
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnhqcy5vYnNlcnZhYmxlLnJlc2l6ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1obS1jYXJvdXNlbC8iLCJzb3VyY2VzIjpbImxpYi9yeGpzLm9ic2VydmFibGUucmVzaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLGNBQWMsTUFBTSwwQkFBMEIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7OztBQVE3RCxNQUFNLDJCQUEyQixHQUFnQixFQUFFLEVBQWMsRUFBRSxJQUFJLEdBQUcsR0FBRztJQUMzRSxxQkFBSSxXQUEyQixDQUFDO0lBQ2hDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBeUIsRUFBRSxFQUFFO1FBQ3JELFdBQVcsR0FBRyxJQUFJLGNBQWMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNoRCxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzVCLENBQUMsQ0FBQztRQUNILFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDMUIsQ0FBQyxDQUFDLElBQUksQ0FDTCxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQ2xCLEdBQUcsQ0FBQyxHQUFHLEVBQUU7UUFDUCxFQUFFLEVBQUUsQ0FBQztLQUNOLENBQUMsRUFDRixRQUFRLENBQUMsR0FBRyxFQUFFO1FBQ1osV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQixXQUFXLENBQUMsVUFBVSxFQUFFLENBQUM7S0FDMUIsQ0FBQyxDQUNILENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZXNpemVPYnNlcnZlciBmcm9tICdyZXNpemUtb2JzZXJ2ZXItcG9seWZpbGwnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpYmVyIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgdGFwLCBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbi8qKlxyXG4gKiBBbiBvYnNlcnZhYmxlIGNyZWF0b3IgZm9yIGVsZW1lbnQgcmVzaXplLlxyXG4gKiBAcGFyYW0gZWxtIHRoZSB3YXRjaCBlbGVtZW50LlxyXG4gKiBAcGFyYW0gY2Igd2hlbiByZXNpemUgY29tcGxldGUsIGNhbGwgYmFjayBmdW5jdGlvbi5cclxuICogQHBhcmFtIHRpbWUgcmVzaXplIGVtaXQgdGltZSwgZGVmYXVsdCBpcyAyMDBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByZXNpemVPYnNlcnZhYmxlKGVsbTogSFRNTEVsZW1lbnQsIGNiOiAoKSA9PiB2b2lkLCB0aW1lID0gMjAwKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICBsZXQgZWxtT2JzZXJ2ZSQ6IFJlc2l6ZU9ic2VydmVyO1xyXG4gIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZSgob2JzZXJ2ZXI6IFN1YnNjcmliZXI8YW55PikgPT4ge1xyXG4gICAgZWxtT2JzZXJ2ZSQgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXMsIG9icykgPT4ge1xyXG4gICAgICBvYnNlcnZlci5uZXh0KGVsbU9ic2VydmUkKTtcclxuICAgIH0pO1xyXG4gICAgZWxtT2JzZXJ2ZSQub2JzZXJ2ZShlbG0pO1xyXG4gIH0pLnBpcGUoXHJcbiAgICBkZWJvdW5jZVRpbWUodGltZSksXHJcbiAgICB0YXAoKCkgPT4ge1xyXG4gICAgICBjYigpO1xyXG4gICAgfSksXHJcbiAgICBmaW5hbGl6ZSgoKSA9PiB7XHJcbiAgICAgIGVsbU9ic2VydmUkLnVub2JzZXJ2ZShlbG0pO1xyXG4gICAgICBlbG1PYnNlcnZlJC5kaXNjb25uZWN0KCk7XHJcbiAgICB9KVxyXG4gICk7XHJcbn1cclxuIl19