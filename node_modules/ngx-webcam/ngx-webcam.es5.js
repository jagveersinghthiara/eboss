import { Component, EventEmitter, Input, NgModule, Output, ViewChild } from '@angular/core';
import { CommonModule } from '@angular/common';
/**
 * Container class for a captured webcam image
 * @author basst314
 */
var WebcamImage = /** @class */ (function () {
    /**
     * @param {?} imageAsDataUrl
     * @param {?} mimeType
     */
    function WebcamImage(imageAsDataUrl, mimeType) {
        this._mimeType = null;
        this._imageAsBase64 = null;
        this._imageAsDataUrl = null;
        this._mimeType = mimeType;
        this._imageAsDataUrl = imageAsDataUrl;
    }
    Object.defineProperty(WebcamImage.prototype, "imageAsBase64", {
        /**
         * Get the base64 encoded image data
         * @return {?}
         */
        get: function () {
            return this._imageAsBase64 ?
                this._imageAsBase64 : this._imageAsBase64 = this.getDataFromDataUrl(this._imageAsDataUrl);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebcamImage.prototype, "imageAsDataUrl", {
        /**
         * Get the encoded image as dataUrl
         * @return {?}
         */
        get: function () {
            return this._imageAsDataUrl;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Extracts the Base64 data out of the given dataUrl.
     * @param {?} dataUrl
     * @return {?}
     */
    WebcamImage.prototype.getDataFromDataUrl = function (dataUrl) {
        return dataUrl.replace("data:" + this._mimeType + ";base64,", "");
    };
    return WebcamImage;
}());
var WebcamComponent = /** @class */ (function () {
    function WebcamComponent() {
        /**
         * Defines the max width of the webcam area in px
         */
        this.width = '100%';
        /**
         * Defines the max height of the webcam area in px
         */
        this.height = 'auto';
        /**
         * MediaStream object in use for streaming UserMedia data
         */
        this.mediaStream = null;
        /**
         * EventEmitter which fires when an image has been captured
         */
        this.imageCapture = new EventEmitter();
        /**
         * Emits a mediaError if webcam cannot be initialized (e.g. missing user permissions)
         */
        this.initError = new EventEmitter();
        /**
         * Emits when the webcam video was clicked
         */
        this.imageClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    WebcamComponent.prototype.ngAfterViewInit = function () {
        this.initWebcam();
    };
    /**
     * @return {?}
     */
    WebcamComponent.prototype.ngOnDestroy = function () {
        this.stopMediaTracks();
        this.unsubscribeFromSubscriptions();
    };
    Object.defineProperty(WebcamComponent.prototype, "trigger", {
        /**
         * If the given Observable emits, an image will be captured and emitted through 'imageCapture' EventEmitter
         * @param {?} trigger
         * @return {?}
         */
        set: function (trigger) {
            var _this = this;
            if (this.triggerSubscription) {
                this.triggerSubscription.unsubscribe();
            }
            this._trigger = trigger;
            // Subscribe on events from this Observable to take snapshots
            this.triggerSubscription = this._trigger.subscribe(function () {
                _this.takeSnapshot();
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Takes a snapshot of the current webcam's view and emits the image as an event
     * @return {?}
     */
    WebcamComponent.prototype.takeSnapshot = function () {
        // set canvas size to actual video size
        var /** @type {?} */ _video = this.video.nativeElement;
        var /** @type {?} */ dimensions = { width: this.width, height: this.height };
        if (_video.videoWidth) {
            dimensions.width = _video.videoWidth;
            dimensions.height = _video.videoHeight;
        }
        var /** @type {?} */ _canvas = this.canvas.nativeElement;
        _canvas.width = dimensions.width;
        _canvas.height = dimensions.height;
        // paint snapshot image to canvas
        _canvas.getContext('2d').drawImage(this.video.nativeElement, 0, 0);
        // read canvas content as image
        // TODO allow mimeType options as Input()
        var /** @type {?} */ mimeType = "image/jpeg";
        var /** @type {?} */ dataUrl = _canvas.toDataURL(mimeType);
        this.imageCapture.next(new WebcamImage(dataUrl, mimeType));
    };
    /**
     * Init webcam live view
     * @return {?}
     */
    WebcamComponent.prototype.initWebcam = function () {
        var _this = this;
        var /** @type {?} */ _video = this.video.nativeElement;
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            // TODO allow video options as Input()
            navigator.mediaDevices.getUserMedia(/** @type {?} */ ({ video: { facingMode: "environment" } }))
                .then(function (stream) {
                _this.mediaStream = stream;
                _video.srcObject = stream;
                _video.play();
            })
                .catch(function (err) {
                _this.initError.next(/** @type {?} */ ({ message: err.message, mediaStreamError: err }));
                console.warn("Error initializing webcam", err);
            });
        }
        else {
            this.initError.next(/** @type {?} */ ({ message: "Cannot read UserMedia from MediaDevices." }));
        }
    };
    /**
     * Stops all active media tracks.
     * This prevents the webcam from being indicated as active,
     * even if it is no longer used by this component.
     * @return {?}
     */
    WebcamComponent.prototype.stopMediaTracks = function () {
        if (this.mediaStream && this.mediaStream.getTracks) {
            // getTracks() returns all media tracks (video+audio)
            this.mediaStream.getTracks()
                .forEach(function (track) { return track.stop(); });
        }
    };
    /**
     * Unsubscribe from all open subscriptions
     * @return {?}
     */
    WebcamComponent.prototype.unsubscribeFromSubscriptions = function () {
        if (this.triggerSubscription) {
            this.triggerSubscription.unsubscribe();
        }
    };
    return WebcamComponent;
}());
WebcamComponent.decorators = [
    { type: Component, args: [{
                selector: 'webcam',
                template: "\n    <div class=\"webcam-wrapper\" (click)=\"imageClick.next();\">\n      <video #video  width=\"100%\" autoplay muted playsinline></video>\n      <canvas #canvas [width]=\"width\" [height]=\"height\"></canvas>\n    </div>\n  ",
                styles: ["\n    .webcam-wrapper {\n      display: inline-block;\n      line-height: 0; }\n      .webcam-wrapper canvas {\n        display: none; }\n  "]
            },] },
];
/**
 * @nocollapse
 */
WebcamComponent.ctorParameters = function () { return []; };
WebcamComponent.propDecorators = {
    'width': [{ type: Input },],
    'height': [{ type: Input },],
    'imageCapture': [{ type: Output },],
    'initError': [{ type: Output },],
    'imageClick': [{ type: Output },],
    'video': [{ type: ViewChild, args: ['video',] },],
    'canvas': [{ type: ViewChild, args: ['canvas',] },],
    'trigger': [{ type: Input },],
};
var COMPONENTS = [
    WebcamComponent
];
var WebcamModule = /** @class */ (function () {
    function WebcamModule() {
    }
    return WebcamModule;
}());
WebcamModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    COMPONENTS
                ],
                exports: [
                    COMPONENTS
                ]
            },] },
];
/**
 * @nocollapse
 */
WebcamModule.ctorParameters = function () { return []; };
var WebcamInitError = /** @class */ (function () {
    function WebcamInitError() {
        this.message = null;
        this.mediaStreamError = null;
    }
    return WebcamInitError;
}());
/**
 * Generated bundle index. Do not edit.
 */
export { WebcamModule, WebcamComponent, WebcamImage, WebcamInitError };
//# sourceMappingURL=ngx-webcam.es5.js.map
