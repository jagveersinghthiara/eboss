(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('resize-observer-polyfill'), require('rxjs'), require('rxjs/operators'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('ngx-hm-carousel', ['exports', '@angular/core', 'resize-observer-polyfill', 'rxjs', 'rxjs/operators', '@angular/common', '@angular/forms'], factory) :
    (factory((global['ngx-hm-carousel'] = {}),global.ng.core,null,global.rxjs,global.rxjs.operators,global.ng.common,global.ng.forms));
}(this, (function (exports,core,ResizeObserver,rxjs,operators,common,forms) { 'use strict';

    ResizeObserver = ResizeObserver && ResizeObserver.hasOwnProperty('default') ? ResizeObserver['default'] : ResizeObserver;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxHmCarouselDynamicDirective = (function () {
        function NgxHmCarouselDynamicDirective(_view, _template) {
            this._view = _view;
            this._template = _template;
            this.compelete = false;
            this._view.clear();
        }
        Object.defineProperty(NgxHmCarouselDynamicDirective.prototype, "currentI", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (!this.compelete) {
                    var /** @type {?} */ nextI = value + 1;
                    var /** @type {?} */ prevI = value - 1;
                    if (this.index === 0 ||
                        this.index === this.length - 1 ||
                        this.index === nextI ||
                        this.index === prevI ||
                        this.index === value) {
                        this._view.createEmbeddedView(this._template);
                        this.compelete = true;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgxHmCarouselDynamicDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        NgxHmCarouselDynamicDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ngxHmCarouselDynamic]'
                    },] },
        ];
        /** @nocollapse */
        NgxHmCarouselDynamicDirective.ctorParameters = function () {
            return [
                { type: core.ViewContainerRef, },
                { type: core.TemplateRef, },
            ];
        };
        NgxHmCarouselDynamicDirective.propDecorators = {
            "index": [{ type: core.Input, args: ['ngxHmCarouselDynamic',] },],
            "length": [{ type: core.Input, args: ['ngxHmCarouselDynamicLength',] },],
            "currentI": [{ type: core.Input, args: ['ngxHmCarouselDynamicIndex',] },],
        };
        return NgxHmCarouselDynamicDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxHmCarouselItemDirective = (function () {
        function NgxHmCarouselItemDirective() {
            this.clickEvent = new core.EventEmitter();
        }
        NgxHmCarouselItemDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ngx-hm-carousel-item]'
                    },] },
        ];
        /** @nocollapse */
        NgxHmCarouselItemDirective.ctorParameters = function () { return []; };
        NgxHmCarouselItemDirective.propDecorators = {
            "clickEvent": [{ type: core.Output, args: ['ngx-hm-carousel-item',] },],
        };
        return NgxHmCarouselItemDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * An observable creator for element resize.
     * @param {?} elm the watch element.
     * @param {?} cb when resize complete, call back function.
     * @param {?=} time resize emit time, default is 200
     * @return {?}
     */
    function resizeObservable(elm, cb, time) {
        if (time === void 0) {
            time = 200;
        }
        var /** @type {?} */ elmObserve$;
        return rxjs.Observable.create(function (observer) {
            elmObserve$ = new ResizeObserver(function (entries, obs) {
                observer.next(elmObserve$);
            });
            elmObserve$.observe(elm);
        }).pipe(operators.debounceTime(time), operators.tap(function () {
            cb();
        }), operators.finalize(function () {
            elmObserve$.unobserve(elm);
            elmObserve$.disconnect();
        }));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    // if the pane is paned .25, switch to the next pane.
    var /** @type {?} */ PANBOUNDARY = 0.15;
    var NgxHmCarouselComponent = (function () {
        function NgxHmCarouselComponent(platformId, _renderer) {
            this.platformId = platformId;
            this._renderer = _renderer;
            this.aniTime = 400;
            this.align = 'center';
            this.infinite = false;
            this.mourseEnable = false;
            this.speed = 5000;
            this.delay = 8000;
            this.direction = 'right';
            this.scrollNum = 1;
            this.isDragMany = false;
            this.indexChanged = new core.EventEmitter();
            this.isFromAuto = true;
            this._currentIndex = 0;
            this._showNum = 1;
            this.isAutoNum = false;
            this._autoplay = false;
            this._porgressWidth = 0;
            this.alignDistance = 0;
            this.lastIndex = 0;
            this.elmWidth = 0;
            this.container_left = 0;
            this.mouseOnContainer = false;
            this.restart = new rxjs.BehaviorSubject(null);
            this.stopEvent = new rxjs.Subject();
        }
        Object.defineProperty(NgxHmCarouselComponent.prototype, "showNum", {
            get: /**
             * @return {?}
             */ function () {
                return this._showNum;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value === 'auto') {
                    this.isAutoNum = true;
                }
                else {
                    this._showNum = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxHmCarouselComponent.prototype, "currentIndex", {
            get: /**
             * @return {?}
             */ function () {
                return this._currentIndex;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                // if now index if not equale to save index, do someting
                if (this.currentIndex !== value) {
                    this._currentIndex = value;
                    if (this.itemsElm) {
                        if (this.autoplay && !this.isFromAuto) {
                            this.stopEvent.next();
                            this.restart.next(null);
                        }
                        this.drawView(this.currentIndex);
                    }
                }
                this.isFromAuto = false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxHmCarouselComponent.prototype, "autoplay", {
            get: /**
             * @return {?}
             */ function () {
                return this._autoplay;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (common.isPlatformBrowser(this.platformId)) {
                    if (this.itemsElm) {
                        this.progressWidth = 0;
                        if (value) {
                            this.doNextSub$ = this.doNext.subscribe();
                        }
                        else {
                            if (this.doNextSub$) {
                                this.doNextSub$.unsubscribe();
                            }
                        }
                    }
                }
                this._autoplay = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxHmCarouselComponent.prototype, "progressWidth", {
            get: /**
             * @return {?}
             */ function () {
                return this._porgressWidth;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this.progressElm !== undefined && this.autoplay) {
                    this._porgressWidth = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.initVariable();
            };
        /**
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.setViewWidth(true);
                this.reSetVariable();
                this.hammer = this.bindHammer();
                this.drawView(this.currentIndex);
                this.bindClick();
                if (this.autoplay || this.infinite) {
                    this.addInfiniteElm();
                }
                this.elmSub$ = resizeObservable(this.rootElm, function () { return _this.containerResize(); }).subscribe();
            };
        /**
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.addInfiniteElm = /**
         * @return {?}
         */
            function () {
                this.firstElm_clone = /** @type {?} */ (this.itemsElm[this.lastIndex].cloneNode(true));
                this.addStyle(this.firstElm_clone, {
                    position: 'absolute',
                    transform: 'translateX(-100%)'
                });
                this.LatestElm_clone = /** @type {?} */ (this.itemsElm[0].cloneNode(true));
                this.addStyle(this.LatestElm_clone, {
                    position: 'absolute',
                    right: 0,
                    top: 0,
                    transform: 'translateX(100%)'
                });
                this._renderer.insertBefore(this.containerElm, this.firstElm_clone, this.itemsElm[0]);
                this._renderer.appendChild(this.containerElm, this.LatestElm_clone);
            };
        /**
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.containerResize = /**
         * @return {?}
         */
            function () {
                this.reSetVariable();
                this.setViewWidth();
                // 因為不能滑了，所以要回到第一個，以確保全部都有顯示
                if (this.showNum >= this.itemsElm.length) {
                    this.currentIndex = 0;
                }
                this.drawView(this.currentIndex, false);
            };
        /**
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.btnNext && this.btnPrev) {
                    this.nextListener();
                    this.prevListener();
                }
                this.hammer.destroy();
                if (this.autoplay) {
                    this.doNextSub$.unsubscribe();
                }
                this.elmSub$.unsubscribe();
            };
        /**
         * @param {?} i
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.setIndex = /**
         * @param {?} i
         * @return {?}
         */
            function (i) {
                this.currentIndex = i;
            };
        /**
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.initVariable = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.rootElm = this.parentChild.nativeElement;
                this.containerElm = /** @type {?} */ (this.rootElm.children[0]);
                this.itemsElm = /** @type {?} */ (Array.from(this.containerElm.children));
                this.lastIndex = this.itemsElm.length - 1;
                if (this.dotElm) {
                    this.dots = new Array(this.itemsElm.length);
                }
                var /** @type {?} */ startEvent = this.restart.asObservable();
                var /** @type {?} */ stopEvent = this.stopEvent.asObservable();
                if (this.mourseEnable) {
                    startEvent = rxjs.merge(startEvent, rxjs.fromEvent(this.containerElm, 'mouseleave').pipe(operators.tap(function () { return _this.mouseOnContainer = false; })));
                    stopEvent = rxjs.merge(stopEvent, rxjs.fromEvent(this.containerElm, 'mouseover').pipe(operators.tap(function () { return _this.mouseOnContainer = true; })));
                }
                this.doNext = startEvent.pipe(operators.debounceTime(this.delay), operators.switchMap(function () {
                    return _this.runProgress(20).pipe(operators.tap(function () {
                        _this.isFromAuto = true;
                        // console.log('next');
                        if (_this.direction === 'left') {
                            _this.currentIndex -= _this.scrollNum;
                        }
                        else {
                            _this.currentIndex += _this.scrollNum;
                        }
                    }), operators.takeUntil(stopEvent.pipe(operators.tap(function () { return _this.progressWidth = 0; }))));
                }));
                if (this.autoplay) {
                    this.doNextSub$ = this.doNext.subscribe();
                }
            };
        /**
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.reSetVariable = /**
         * @return {?}
         */
            function () {
                this.container_left = this.rootElm.getBoundingClientRect().left;
                if (this.showNum && this.showNum !== 1) {
                    switch (this.align) {
                        case 'center':
                            this.alignDistance = (this.rootElm.clientWidth - this.elmWidth) / 2;
                            break;
                        case 'left':
                            this.alignDistance = 0;
                            break;
                        case 'right':
                            this.alignDistance = this.rootElm.clientWidth - this.elmWidth;
                            break;
                    }
                }
                // console.log(this.alignDistance);
            };
        /**
         * @param {?=} isInit
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.setViewWidth = /**
         * @param {?=} isInit
         * @return {?}
         */
            function (isInit) {
                var _this = this;
                if (this.isAutoNum) {
                    this._showNum = this.getAutoNum();
                }
                this._renderer.addClass(this.containerElm, 'grab');
                // when init check view has scroll bar
                var /** @type {?} */ totalWidth = 0;
                if (isInit) {
                    // remain one elm height
                    this._renderer.addClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');
                }
                this.elmWidth = (totalWidth + this.rootElm.clientWidth) / this._showNum;
                this._renderer.removeClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');
                this._renderer.setStyle(this.containerElm, 'width', this.elmWidth * this.itemsElm.length + "px");
                this._renderer.setStyle(this.containerElm, 'position', 'relative');
                this.itemsElm.forEach(function (elm, index) {
                    _this._renderer.setStyle(elm, 'width', _this.elmWidth + "px");
                });
                if (this.firstElm_clone) {
                    this._renderer.setStyle(this.firstElm_clone, 'width', this.elmWidth + "px");
                    this._renderer.setStyle(this.LatestElm_clone, 'width', this.elmWidth + "px");
                }
            };
        /**
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.bindHammer = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ hm = new Hammer(this.containerElm);
                hm.get('pan').set({ direction: Hammer.DIRECTION_HORIZONTAL });
                hm.on('panleft panright panend tap', function (e) {
                    _this._renderer.removeClass(_this.containerElm, 'transition');
                    _this._renderer.addClass(_this.containerElm, 'grabbing');
                    if (_this.autoplay) {
                        _this.stopEvent.next();
                    }
                    // console.log(e.type);
                    switch (e.type) {
                        case 'tap':
                            _this.callClick(e.center.x);
                            _this.callRestart();
                            _this._renderer.removeClass(_this.containerElm, 'grabbing');
                            break;
                        case 'panleft':
                        case 'panright':
                            // 顯示總數量小於總數量，停止滑動
                            if (_this.showNum >= _this.itemsElm.length) {
                                _this.hammer.stop(true);
                                return;
                            }
                            // console.log(e.deltaY);
                            // console.log(e.deltaY);
                            _this.prePanMove = false;
                            if (Math.abs(e.deltaY) > 50) {
                                return;
                            }
                            // Slow down at the first and last pane.
                            if (!(_this.autoplay || _this.infinite) && _this.outOfBound(e.type)) {
                                e.deltaX *= 0.2;
                            }
                            _this._renderer.setStyle(_this.containerElm, 'left', -_this.currentIndex * _this.elmWidth + _this.alignDistance + e.deltaX + "px");
                            if (!_this.isDragMany) {
                                if (Math.abs(e.deltaX) > _this.elmWidth * 0.5) {
                                    if (e.deltaX > 0) {
                                        _this.currentIndex -= _this.scrollNum;
                                    }
                                    else {
                                        _this.currentIndex += _this.scrollNum;
                                    }
                                    _this._renderer.removeClass(_this.containerElm, 'grabbing');
                                    _this.callRestart();
                                    _this.hammer.stop(true);
                                    // remember prv action, to avoid hammer stop, then click
                                    // remember prv action, to avoid hammer stop, then click
                                    _this.prePanMove = true;
                                }
                            }
                            break;
                        case 'panend':
                            _this.callRestart();
                            _this._renderer.removeClass(_this.containerElm, 'grabbing');
                            if (Math.abs(e.deltaX) > _this.elmWidth * PANBOUNDARY) {
                                var /** @type {?} */ moveNum = _this.isDragMany ?
                                    Math.ceil(Math.abs(e.deltaX) / _this.elmWidth) : _this.scrollNum;
                                var /** @type {?} */ prevIndex = _this.currentIndex - moveNum;
                                var /** @type {?} */ nextIndex = _this.currentIndex + moveNum;
                                // 如果不是無限循環，不能大於或小於
                                if (e.deltaX > 0) {
                                    if (!(_this.autoplay || _this.infinite) && prevIndex < 0) {
                                        prevIndex = 0;
                                        _this.drawView(0);
                                    }
                                    _this.currentIndex = prevIndex;
                                }
                                else {
                                    if (!(_this.autoplay || _this.infinite) && nextIndex > _this.lastIndex - _this._showNum + 1) {
                                        nextIndex = _this.lastIndex - _this._showNum + 1;
                                        _this.drawView(nextIndex);
                                    }
                                    _this.currentIndex = nextIndex;
                                }
                                break;
                            }
                            else {
                                if (!_this.isDragMany && _this.prePanMove) {
                                    _this.callClick(e.center.x);
                                }
                            }
                            // console.log(this.currentIndex);
                            // console.log(this.currentIndex);
                            _this.drawView(_this.currentIndex);
                            _this.prePanMove = false;
                            break;
                    }
                });
                return hm;
            };
        /**
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.bindClick = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.btnNext && this.btnPrev) {
                    this.nextListener = this._renderer.listen(this.btnNext.nativeElement, 'click', function () {
                        _this.currentIndex++;
                    });
                    this.prevListener = this._renderer.listen(this.btnPrev.nativeElement, 'click', function () {
                        _this.currentIndex--;
                    });
                }
            };
        /**
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.callRestart = /**
         * @return {?}
         */
            function () {
                if (this.autoplay && !this.mouseOnContainer) {
                    this.restart.next(null);
                }
            };
        /**
         * @param {?} positionX
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.callClick = /**
         * @param {?} positionX
         * @return {?}
         */
            function (positionX) {
                // click position subtract the containerlef and alignDistance is the move distance
                var /** @type {?} */ toIndex = this.currentIndex + Math.floor((positionX - this.container_left - this.alignDistance) / this.elmWidth);
                var /** @type {?} */ elm = this.items.toArray()[toIndex];
                if (elm) {
                    elm.clickEvent.emit(toIndex);
                }
            };
        /**
         * @param {?} index
         * @param {?=} isEmit
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.drawView = /**
         * @param {?} index
         * @param {?=} isEmit
         * @return {?}
         */
            function (index, isEmit) {
                if (isEmit === void 0) {
                    isEmit = true;
                }
                var /** @type {?} */ lastIndex = this.lastIndex;
                if (this.autoplay || this.infinite) {
                    if (index < 0) {
                        this._currentIndex = lastIndex;
                    }
                    else if (index > lastIndex) {
                        this._currentIndex = 0;
                    }
                }
                else {
                    this._currentIndex = Math.max(0, Math.min(index, this.lastIndex));
                }
                // 只有當大於1才要移動
                if (this.itemsElm.length > 1) {
                    var /** @type {?} */ leftDistance = (index * this.elmWidth) - this.alignDistance;
                    this._renderer.setStyle(this.containerElm, 'left', -leftDistance + "px");
                    if (isEmit) {
                        this._renderer.addClass(this.containerElm, 'transition');
                        this.indexChanged.emit(this.currentIndex);
                    }
                    else {
                        this._renderer.removeClass(this.containerElm, 'transition');
                    }
                    // 如果是循環的，當動畫結束偷偷的跳到當前的index、left去
                    this.InfiniteHandler(index, lastIndex);
                }
                else {
                    this._renderer.setStyle(this.containerElm, 'left', this.alignDistance + "px");
                }
            };
        /**
         * @param {?} index
         * @param {?} lastIndex
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.InfiniteHandler = /**
         * @param {?} index
         * @param {?} lastIndex
         * @return {?}
         */
            function (index, lastIndex) {
                var _this = this;
                if ((this.autoplay || this.infinite)) {
                    setTimeout(function () {
                        _this._renderer.removeClass(_this.containerElm, 'transition');
                        // 如果是循環的，當動畫結束偷偷的跳到當前的index、left去
                        var /** @type {?} */ distance = 0;
                        if (index <= -1) {
                            distance = (lastIndex * _this.elmWidth) - _this.alignDistance;
                            _this._renderer.setStyle(_this.containerElm, 'left', -distance + "px");
                        }
                        else if (index > lastIndex) {
                            _this._renderer.setStyle(_this.containerElm, 'left', "0px");
                        }
                    }, this.aniTime);
                }
            };
        /**
         * @param {?} type
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.outOfBound = /**
         * @param {?} type
         * @return {?}
         */
            function (type) {
                switch (type) {
                    case 'panleft':
                        return this.currentIndex >= this.lastIndex - this._showNum + 1;
                    case 'panright':
                        return this.currentIndex <= 0;
                }
            };
        /**
         * @param {?} betweenTime
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.runProgress = /**
         * @param {?} betweenTime
         * @return {?}
         */
            function (betweenTime) {
                var _this = this;
                var /** @type {?} */ howTimes = this.speed / betweenTime;
                var /** @type {?} */ everyIncrease = 100 / this.speed * betweenTime;
                // console.log('progress');
                return rxjs.interval(betweenTime).pipe(operators.tap(function (t) {
                    _this.progressWidth = (t % howTimes) * everyIncrease;
                }), operators.bufferCount(Math.round(this.speed / betweenTime), 0));
            };
        /**
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.getAutoNum = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ initNum = 3;
                // 610
                var /** @type {?} */ width = this.rootElm.clientWidth;
                if (width > 300) {
                    return Math.floor(initNum + (width / 200));
                }
                return initNum;
            };
        /**
         * @param {?} elm
         * @param {?} style
         * @return {?}
         */
        NgxHmCarouselComponent.prototype.addStyle = /**
         * @param {?} elm
         * @param {?} style
         * @return {?}
         */
            function (elm, style) {
                var _this = this;
                if (style) {
                    Object.keys(style).forEach(function (key) {
                        var /** @type {?} */ value = style[key];
                        _this._renderer.setStyle(elm, key, value);
                    });
                }
            };
        NgxHmCarouselComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-hm-carousel',
                        template: "<div #parentChild class=\"carousel\">\n  <ng-content select=\"[ngx-hm-carousel-container]\"></ng-content>\n  <!-- left -->\n  <div #prev *ngIf=\"contentPrev\"\n    class=\"direction left\">\n    <ng-container *ngTemplateOutlet=\"contentPrev\"></ng-container>\n  </div>\n  <!--  right -->\n  <div #next *ngIf=\"contentNext\"\n    class=\"direction right\">\n    <ng-container *ngTemplateOutlet=\"contentNext\"></ng-container>\n  </div>\n  <!-- indicators -->\n  <ul class=\"indicators\" *ngIf=\"dotElm\">\n    <li\n      *ngFor=\"let dot of dots; let i = index;\"\n      (click)=\"setIndex(i)\">\n      <ng-container\n        *ngTemplateOutlet=\"dotElm, context: {\n          $implicit: {\n            index : i,\n            currentIndex : currentIndex\n          }\n        }\">\n      </ng-container>\n    </li>\n  </ul>\n  <!-- progress -->\n  <div *ngIf=\"progressElm && autoplay\">\n    <ng-container\n      *ngTemplateOutlet=\"progressElm, context: {\n        $implicit: {\n          progress:progressWidth\n        }\n      }\">\n    </ng-container>\n  </div>\n</div>\n",
                        styles: [":host{display:block;height:100%}.ngx-hm-carousel-display-npwrap{display:flex!important;flex-wrap:nowrap!important;flex-direction:row!important;overflow:hidden!important}.carousel{overflow:hidden;position:relative;width:100%;height:100%}.carousel ul.indicators{list-style:none;bottom:1rem;left:0;margin:0;padding:0;position:absolute;text-align:center;width:100%}.carousel ul.indicators li{cursor:pointer;display:inline-block;position:relative;padding:.5rem}.carousel .direction{position:absolute;height:100%;display:flex;align-items:center;justify-content:center;top:0}.carousel .direction.left{left:0}.carousel .direction.right{position:absolute;right:0}.transition{transition:all .4s ease-in-out}.grab{cursor:-webkit-grab;cursor:grab}.grabbing{cursor:-webkit-grabbing;cursor:grabbing}.pointer{cursor:pointer}"],
                        encapsulation: core.ViewEncapsulation.None
                    },] },
        ];
        /** @nocollapse */
        NgxHmCarouselComponent.ctorParameters = function () {
            return [
                { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },
                { type: core.Renderer2, },
            ];
        };
        NgxHmCarouselComponent.propDecorators = {
            "parentChild": [{ type: core.ViewChild, args: ['parentChild',] },],
            "btnPrev": [{ type: core.ViewChild, args: ['prev',] },],
            "btnNext": [{ type: core.ViewChild, args: ['next',] },],
            "items": [{ type: core.ContentChildren, args: [NgxHmCarouselItemDirective,] },],
            "contentPrev": [{ type: core.ContentChild, args: ['carouselPrev',] },],
            "contentNext": [{ type: core.ContentChild, args: ['carouselNext',] },],
            "dotElm": [{ type: core.ContentChild, args: ['carouselDot',] },],
            "progressElm": [{ type: core.ContentChild, args: ['carouselProgress',] },],
            "aniTime": [{ type: core.Input, args: ['aniTime',] },],
            "align": [{ type: core.Input, args: ['align',] },],
            "infinite": [{ type: core.Input, args: ['infinite',] },],
            "mourseEnable": [{ type: core.Input, args: ['mourse-enable',] },],
            "speed": [{ type: core.Input, args: ['autoplay-speed',] },],
            "delay": [{ type: core.Input, args: ['between-delay',] },],
            "direction": [{ type: core.Input, args: ['autoplay-direction',] },],
            "showNum": [{ type: core.Input, args: ['show-num',] },],
            "scrollNum": [{ type: core.Input, args: ['scroll-num',] },],
            "isDragMany": [{ type: core.Input, args: ['drag-many',] },],
            "currentIndex": [{ type: core.Input, args: ['current-index',] },],
            "autoplay": [{ type: core.Input, args: ['autoplay',] },],
            "indexChanged": [{ type: core.Output, args: ['index-change',] },],
        };
        return NgxHmCarouselComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxHmCarouselModule = (function () {
        function NgxHmCarouselModule() {
        }
        NgxHmCarouselModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                        ],
                        declarations: [
                            NgxHmCarouselComponent,
                            NgxHmCarouselItemDirective,
                            NgxHmCarouselDynamicDirective
                        ],
                        exports: [
                            NgxHmCarouselComponent,
                            NgxHmCarouselItemDirective,
                            NgxHmCarouselDynamicDirective
                        ]
                    },] },
        ];
        return NgxHmCarouselModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.NgxHmCarouselDynamicDirective = NgxHmCarouselDynamicDirective;
    exports.NgxHmCarouselItemDirective = NgxHmCarouselItemDirective;
    exports.NgxHmCarouselComponent = NgxHmCarouselComponent;
    exports.NgxHmCarouselModule = NgxHmCarouselModule;
    exports.resizeObservable = resizeObservable;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,