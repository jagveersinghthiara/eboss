{"version":3,"file":"ngx-webcam.umd.min.js","sources":["~/ngx-webcam/src/app/modules/webcam/domain/webcam-image.ts","~/ngx-webcam/src/app/modules/webcam/webcam/webcam.component.ts","~/ngx-webcam/src/app/modules/webcam/webcam.module.ts","~/ngx-webcam/src/app/modules/webcam/domain/webcam-init-error.ts"],"sourcesContent":["\n/**\n * Container class for a captured webcam image\n * @author basst314\n */\nexport class WebcamImage {\nprivate _mimeType: string = null;\nprivate _imageAsBase64: string = null;\nprivate _imageAsDataUrl: string = null;\n/**\n * @param {?} imageAsDataUrl\n * @param {?} mimeType\n */\npublic constructor(imageAsDataUrl: string, mimeType: string) {\n    this._mimeType = mimeType;\n    this._imageAsDataUrl = imageAsDataUrl;\n  }\n/**\n * Get the base64 encoded image data\n * @return {?}\n */\npublic get imageAsBase64(): string {\n    return this._imageAsBase64 ?\n      this._imageAsBase64 : this._imageAsBase64 = this.getDataFromDataUrl(this._imageAsDataUrl);\n  }\n/**\n * Get the encoded image as dataUrl\n * @return {?}\n */\npublic get imageAsDataUrl(): string {\n    return this._imageAsDataUrl\n  }\n/**\n * Extracts the Base64 data out of the given dataUrl.\n * @param {?} dataUrl\n * @return {?}\n */\nprivate getDataFromDataUrl(dataUrl: string) {\n    return dataUrl.replace(\"data:\" + this._mimeType + \";base64,\", \"\")\n  }\n}\n\nfunction WebcamImage_tsickle_Closure_declarations() {\n/** @type {?} */\nWebcamImage.prototype._mimeType;\n/** @type {?} */\nWebcamImage.prototype._imageAsBase64;\n/** @type {?} */\nWebcamImage.prototype._imageAsDataUrl;\n}\n\n","import {AfterViewInit, Component, EventEmitter, Input, OnDestroy, Output, ViewChild} from '@angular/core';\nimport {WebcamInitError} from '../domain/webcam-init-error';\nimport {WebcamImage} from '../domain/webcam-image';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nexport class WebcamComponent implements AfterViewInit, OnDestroy {\n/**\n * Defines the max width of the webcam area in px\n */\npublic width: number = 640;\n/**\n * Defines the max height of the webcam area in px\n */\npublic height: number = 480;\n/**\n * If this Observable emits, an image will be captured and emitted through 'imageCapture' EventEmitter\n */\nprivate _trigger: Observable<void>;\nprivate triggerSubscription: Subscription;\n/**\n * MediaStream object in use for streaming UserMedia data\n */\nprivate mediaStream: MediaStream = null;\n/**\n * EventEmitter which fires when an image has been captured\n */\npublic imageCapture: EventEmitter<WebcamImage> = new EventEmitter<WebcamImage>();\n/**\n * Emits a mediaError if webcam cannot be initialized (e.g. missing user permissions)\n */\npublic initError: EventEmitter<WebcamInitError> = new EventEmitter<WebcamInitError>();\n/**\n * Emits when the webcam video was clicked\n */\npublic imageClick: EventEmitter<void> = new EventEmitter<void>();\nprivate video: any;\nprivate canvas: any;\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n    this.initWebcam();\n  }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n    this.stopMediaTracks();\n    this.unsubscribeFromSubscriptions();\n  }\n/**\n * If the given Observable emits, an image will be captured and emitted through 'imageCapture' EventEmitter\n * @param {?} trigger\n * @return {?}\n */\npublic set trigger(trigger: Observable<void>) {\n    if (this.triggerSubscription) {\n      this.triggerSubscription.unsubscribe();\n    }\n    this._trigger = trigger;\n\n    // Subscribe on events from this Observable to take snapshots\n    this.triggerSubscription = this._trigger.subscribe(() => {\n      this.takeSnapshot();\n    });\n  }\n/**\n * Takes a snapshot of the current webcam's view and emits the image as an event\n * @return {?}\n */\npublic takeSnapshot(): void {\n    // set canvas size to actual video size\n    let /** @type {?} */ _video = this.video.nativeElement;\n    let /** @type {?} */ dimensions = {width: this.width, height: this.height};\n    if (_video.videoWidth) {\n      dimensions.width = _video.videoWidth;\n      dimensions.height = _video.videoHeight;\n    }\n\n    let /** @type {?} */ _canvas = this.canvas.nativeElement;\n    _canvas.width = dimensions.width;\n    _canvas.height = dimensions.height;\n\n    // paint snapshot image to canvas\n    _canvas.getContext('2d').drawImage(this.video.nativeElement, 0, 0);\n\n    // read canvas content as image\n    // TODO allow mimeType options as Input()\n    let /** @type {?} */ mimeType: string = \"image/jpeg\";\n    let /** @type {?} */ dataUrl: string = _canvas.toDataURL(mimeType);\n\n    this.imageCapture.next(new WebcamImage(dataUrl, mimeType));\n  }\n/**\n * Init webcam live view\n * @return {?}\n */\nprivate initWebcam() {\n    let /** @type {?} */ _video = this.video.nativeElement;\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      // TODO allow video options as Input()\n      navigator.mediaDevices.getUserMedia( /** @type {?} */((<MediaStreamConstraints>{video: {facingMode: \"environment\"}})))\n        .then((stream: MediaStream) => {\n          this.mediaStream = stream;\n          _video.srcObject = stream;\n          _video.play();\n        })\n        .catch((err: MediaStreamError) => {\n          this.initError.next( /** @type {?} */((<WebcamInitError>{message: err.message, mediaStreamError: err})));\n          console.warn(\"Error initializing webcam\", err);\n        });\n    } else {\n      this.initError.next( /** @type {?} */((<WebcamInitError> {message: \"Cannot read UserMedia from MediaDevices.\"})));\n    }\n  }\n/**\n * Stops all active media tracks.\n * This prevents the webcam from being indicated as active,\n * even if it is no longer used by this component.\n * @return {?}\n */\nprivate stopMediaTracks() {\n    if (this.mediaStream && this.mediaStream.getTracks) {\n      // getTracks() returns all media tracks (video+audio)\n      this.mediaStream.getTracks()\n        .forEach((track: MediaStreamTrack) => track.stop());\n    }\n  }\n/**\n * Unsubscribe from all open subscriptions\n * @return {?}\n */\nprivate unsubscribeFromSubscriptions() {\n    if (this.triggerSubscription) {\n      this.triggerSubscription.unsubscribe();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'webcam',\n  template: `\n    <div class=\"webcam-wrapper\" (click)=\"imageClick.next();\">\n      <video #video [width]=\"width\" [height]=\"height\" autoplay muted playsinline></video>\n      <canvas #canvas [width]=\"width\" [height]=\"height\"></canvas>\n    </div>\n  `,\n  styles: [`\n    .webcam-wrapper {\n      display: inline-block;\n      line-height: 0; }\n      .webcam-wrapper canvas {\n        display: none; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'width': [{ type: Input },],\n'height': [{ type: Input },],\n'imageCapture': [{ type: Output },],\n'initError': [{ type: Output },],\n'imageClick': [{ type: Output },],\n'video': [{ type: ViewChild, args: ['video', ] },],\n'canvas': [{ type: ViewChild, args: ['canvas', ] },],\n'trigger': [{ type: Input },],\n};\n}\n\nfunction WebcamComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nWebcamComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWebcamComponent.ctorParameters;\n/** @type {?} */\nWebcamComponent.propDecorators;\n/**\n * Defines the max width of the webcam area in px\n * @type {?}\n */\nWebcamComponent.prototype.width;\n/**\n * Defines the max height of the webcam area in px\n * @type {?}\n */\nWebcamComponent.prototype.height;\n/**\n * If this Observable emits, an image will be captured and emitted through 'imageCapture' EventEmitter\n * @type {?}\n */\nWebcamComponent.prototype._trigger;\n/** @type {?} */\nWebcamComponent.prototype.triggerSubscription;\n/**\n * MediaStream object in use for streaming UserMedia data\n * @type {?}\n */\nWebcamComponent.prototype.mediaStream;\n/**\n * EventEmitter which fires when an image has been captured\n * @type {?}\n */\nWebcamComponent.prototype.imageCapture;\n/**\n * Emits a mediaError if webcam cannot be initialized (e.g. missing user permissions)\n * @type {?}\n */\nWebcamComponent.prototype.initError;\n/**\n * Emits when the webcam video was clicked\n * @type {?}\n */\nWebcamComponent.prototype.imageClick;\n/** @type {?} */\nWebcamComponent.prototype.video;\n/** @type {?} */\nWebcamComponent.prototype.canvas;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {WebcamComponent} from './webcam/webcam.component';\n\nconst /** @type {?} */ COMPONENTS = [\n  WebcamComponent\n];\nexport class WebcamModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    COMPONENTS\n  ],\n  exports: [\n    COMPONENTS\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction WebcamModule_tsickle_Closure_declarations() {\n/** @type {?} */\nWebcamModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWebcamModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport class WebcamInitError {\npublic message: string = null;\npublic mediaStreamError: MediaStreamError = null;\n}\n\nfunction WebcamInitError_tsickle_Closure_declarations() {\n/** @type {?} */\nWebcamInitError.prototype.message;\n/** @type {?} */\nWebcamInitError.prototype.mediaStreamError;\n}\n\n"],"names":["WebcamImage","imageAsDataUrl","mimeType","this","_mimeType","_imageAsBase64","_imageAsDataUrl","Object","defineProperty","prototype","get","getDataFromDataUrl","dataUrl","replace","WebcamComponent","width","height","mediaStream","imageCapture","EventEmitter","initError","imageClick","ngAfterViewInit","initWebcam","ngOnDestroy","stopMediaTracks","unsubscribeFromSubscriptions","set","trigger","_this","triggerSubscription","unsubscribe","_trigger","subscribe","takeSnapshot","_video","video","nativeElement","dimensions","videoWidth","videoHeight","_canvas","canvas","getContext","drawImage","toDataURL","next","navigator","mediaDevices","getUserMedia","facingMode","then","stream","srcObject","play","catch","err","message","mediaStreamError","console","warn","getTracks","forEach","track","stop","decorators","type","Component","args","selector","template","styles","ctorParameters","propDecorators","Input","Output","ViewChild","COMPONENTS","WebcamModule","NgModule","imports","CommonModule","declarations","exports","WebcamInitError"],"mappings":"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"}
