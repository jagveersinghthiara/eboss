/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
export class NgxHmCarouselDynamicDirective {
    /**
     * @param {?} _view
     * @param {?} _template
     */
    constructor(_view, _template) {
        this._view = _view;
        this._template = _template;
        this.compelete = false;
        this._view.clear();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set currentI(value) {
        if (!this.compelete) {
            const /** @type {?} */ nextI = value + 1;
            const /** @type {?} */ prevI = value - 1;
            if (this.index === 0 ||
                this.index === this.length - 1 ||
                this.index === nextI ||
                this.index === prevI ||
                this.index === value) {
                this._view.createEmbeddedView(this._template);
                this.compelete = true;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
NgxHmCarouselDynamicDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxHmCarouselDynamic]'
            },] },
];
/** @nocollapse */
NgxHmCarouselDynamicDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
    { type: TemplateRef, },
];
NgxHmCarouselDynamicDirective.propDecorators = {
    "index": [{ type: Input, args: ['ngxHmCarouselDynamic',] },],
    "length": [{ type: Input, args: ['ngxHmCarouselDynamicLength',] },],
    "currentI": [{ type: Input, args: ['ngxHmCarouselDynamicIndex',] },],
};
function NgxHmCarouselDynamicDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgxHmCarouselDynamicDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgxHmCarouselDynamicDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    NgxHmCarouselDynamicDirective.propDecorators;
    /** @type {?} */
    NgxHmCarouselDynamicDirective.prototype.index;
    /** @type {?} */
    NgxHmCarouselDynamicDirective.prototype.length;
    /** @type {?} */
    NgxHmCarouselDynamicDirective.prototype.compelete;
    /** @type {?} */
    NgxHmCarouselDynamicDirective.prototype._view;
    /** @type {?} */
    NgxHmCarouselDynamicDirective.prototype._template;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhtLWNhcm91c2VsLWR5bmFtaWMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWhtLWNhcm91c2VsLyIsInNvdXJjZXMiOlsibGliL25neC1obS1jYXJvdXNlbC1keW5hbWljLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBS3hGLE1BQU07Ozs7O0lBeUJKLFlBQ1UsT0FDQTtRQURBLFVBQUssR0FBTCxLQUFLO1FBQ0wsY0FBUyxHQUFULFNBQVM7eUJBSEMsS0FBSztRQUl2QixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQ3BCOzs7OztRQXZCRyxRQUFRLENBQUMsS0FBYTtRQUN4QixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBRXBCLHVCQUFNLEtBQUssR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQ3hCLHVCQUFNLEtBQUssR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBRXhCLEVBQUUsQ0FBQyxDQUNELElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQztnQkFDaEIsSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSztnQkFDcEIsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLO2dCQUNwQixJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUM5QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQzthQUN2QjtTQUNGOzs7OztJQVVILFFBQVE7S0FDUDs7O1lBbkNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsd0JBQXdCO2FBQ25DOzs7O1lBSitDLGdCQUFnQjtZQUE3QixXQUFXOzs7c0JBTzNDLEtBQUssU0FBQyxzQkFBc0I7dUJBQzVCLEtBQUssU0FBQyw0QkFBNEI7eUJBQ2xDLEtBQUssU0FBQywyQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkluaXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tuZ3hIbUNhcm91c2VsRHluYW1pY10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hIbUNhcm91c2VsRHluYW1pY0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIEBJbnB1dCgnbmd4SG1DYXJvdXNlbER5bmFtaWMnKSBpbmRleDogbnVtYmVyO1xyXG4gIEBJbnB1dCgnbmd4SG1DYXJvdXNlbER5bmFtaWNMZW5ndGgnKSBsZW5ndGg6IG51bWJlcjtcclxuICBASW5wdXQoJ25neEhtQ2Fyb3VzZWxEeW5hbWljSW5kZXgnKVxyXG5cclxuICBzZXQgY3VycmVudEkodmFsdWU6IG51bWJlcikge1xyXG4gICAgaWYgKCF0aGlzLmNvbXBlbGV0ZSkge1xyXG5cclxuICAgICAgY29uc3QgbmV4dEkgPSB2YWx1ZSArIDE7XHJcbiAgICAgIGNvbnN0IHByZXZJID0gdmFsdWUgLSAxO1xyXG5cclxuICAgICAgaWYgKFxyXG4gICAgICAgIHRoaXMuaW5kZXggPT09IDAgfHxcclxuICAgICAgICB0aGlzLmluZGV4ID09PSB0aGlzLmxlbmd0aCAtIDEgfHxcclxuICAgICAgICB0aGlzLmluZGV4ID09PSBuZXh0SSB8fFxyXG4gICAgICAgIHRoaXMuaW5kZXggPT09IHByZXZJIHx8XHJcbiAgICAgICAgdGhpcy5pbmRleCA9PT0gdmFsdWUpIHtcclxuICAgICAgICB0aGlzLl92aWV3LmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLl90ZW1wbGF0ZSk7XHJcbiAgICAgICAgdGhpcy5jb21wZWxldGUgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNvbXBlbGV0ZSA9IGZhbHNlO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBfdmlldzogVmlld0NvbnRhaW5lclJlZixcclxuICAgIHByaXZhdGUgX3RlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7XHJcbiAgICB0aGlzLl92aWV3LmNsZWFyKCk7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==