{
  "_from": "html2pdf.js@^0.9.1",
  "_id": "html2pdf.js@0.9.1",
  "_inBundle": false,
  "_integrity": "sha512-bneX1NQTj67PZuV4WX19fOGLZWbEIZvO8qLAGOKX5VQsbGXX62/5ZraD42oeUHlh5gSOkFpNf+J9lOjQV6qAvg==",
  "_location": "/html2pdf.js",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "html2pdf.js",
    "fetchSpec": "^0.9.1",
    "name": "html2pdf.js",
    "raw": "html2pdf.js@^0.9.1",
    "rawSpec": "^0.9.1",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/html2pdf.js/-/html2pdf.js-0.9.1.tgz",
  "_shasum": "144fbe972848cebaa1cf6f8fa66395422d9aad55",
  "_shrinkwrap": null,
  "_spec": "html2pdf.js@^0.9.1",
  "_where": "E:\\surinder\\new\\ezeeboss",
  "author": {
    "email": "erik@erik-koopmans.com",
    "name": "Erik Koopmans",
    "url": "https://www.erik-koopmans.com"
  },
  "browser": "dist/html2pdf.js",
  "bugs": {
    "url": "https://github.com/eKoopmans/html2pdf/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "es6-promise": "^4.2.5",
    "html2canvas": "^1.0.0-alpha.12",
    "jspdf": "^1.4.1"
  },
  "deprecated": false,
  "description": "Client-side HTML-to-PDF rendering using pure JS",
  "devDependencies": {
    "babel-core": "^6.26.3",
    "babel-plugin-external-helpers": "^6.22.0",
    "babel-plugin-transform-object-assign": "^6.22.0",
    "babel-preset-env": "^1.7.0",
    "gulp": "^4.0.0",
    "minimist": "^1.2.0",
    "rimraf": "^2.6.2",
    "rollup": "^0.51.8",
    "rollup-plugin-babel": "^3.0.2",
    "rollup-plugin-commonjs": "^8.2.6",
    "rollup-plugin-node-resolve": "^3.0.0",
    "rollup-plugin-replace": "^2.0.0",
    "rollup-plugin-uglify": "^2.0.1"
  },
  "homepage": "https://github.com/eKoopmans/html2pdf",
  "keywords": [
    "canvas",
    "client-side",
    "html",
    "javascript",
    "pdf-generation"
  ],
  "license": "MIT",
  "main": "dist/require/html2pdf.cjs.js",
  "module": "dist/include/html2pdf.es.js",
  "name": "html2pdf.js",
  "optionalDependencies": {},
  "readme": "# html2pdf\n\nhtml2pdf converts any webpage or element into a printable PDF entirely client-side using [html2canvas](https://github.com/niklasvh/html2canvas) and [jsPDF](https://github.com/MrRio/jsPDF).\n\n## Table of contents\n\n- [Getting started](#getting-started)\n  - [HTML](#html)\n  - [NPM](#npm)\n  - [Bower](#bower)\n- [Usage](#usage)\n  - [Advanced usage](#advanced-usage)\n    - [Workflow](#workflow)\n    - [Worker API](#worker-api)\n- [Options](#options)\n  - [Page-breaks](#page-breaks)\n    - [Page-break settings](#page-break-settings)\n    - [Page-break modes](#page-break-modes)\n    - [Example usage](#example-usage)\n  - [Image type and quality](#image-type-and-quality)\n- [Progress tracking](#progress-tracking)\n- [Dependencies](#dependencies)\n- [Contributing](#contributing)\n  - [Issues](#issues)\n  - [Tests](#tests)\n  - [Pull requests](#pull-requests)\n- [Credits](#credits)\n- [License](#license)\n\n## Getting started\n\n#### HTML\n\nThe simplest way to use html2pdf is to download `dist/html2pdf.bundle.min.js` to your project folder and include it in your HTML with:\n\n```html\n<script src=\"html2pdf.bundle.min.js\"></script>\n```\n\n*Note: [Click here](#dependencies) for more information about using the unbundled version `dist/html2canvas.min.js`.*\n\n#### NPM\n\nInstall html2pdf and its dependencies using NPM with `npm install --save html2pdf.js` (make sure to include `.js` in the package name).\n\n*Note: You can use NPM to create your project, but html2pdf **will not run in Node.js**, it must be run in a browser.*\n\n#### Bower\n\nInstall html2pdf and its dependencies using Bower with `bower install --save html2pdf.js` (make sure to include `.js` in the package name).\n\n#### Console\n\nIf you're on a webpage that you can't modify directly and wish to use html2pdf to capture a screenshot, you can follow these steps:\n\n1. Open your browser's console (instructions for different browsers [here](https://webmasters.stackexchange.com/a/77337/94367)).\n2. Paste in this code:\n    ```js\n    function addScript(url) {\n        var script = document.createElement('script');\n        script.type = 'application/javascript';\n        script.src = url;\n        document.head.appendChild(script);\n    }\n    addScript('https://raw.githack.com/eKoopmans/html2pdf/master/dist/html2pdf.bundle.js');\n    ```\n3. You may now execute html2pdf commands directly from the console. To capture a default PDF of the entire page, use `html2pdf(document.body)`.\n\n## Usage\n\nOnce installed, html2pdf is ready to use. The following command will generate a PDF of `#element-to-print` and prompt the user to save the result:\n\n```js\nvar element = document.getElementById('element-to-print');\nhtml2pdf(element);\n```\n\n### Advanced usage\n\nEvery step of html2pdf is configurable, using its new Promise-based API. If html2pdf is called without arguments, it will return a `Worker` object:\n\n```js\nvar worker = html2pdf();  // Or:  var worker = new html2pdf.Worker;\n```\n\nThis worker has methods that can be chained sequentially, as each Promise resolves, and allows insertion of your own intermediate functions between steps. A prerequisite system allows you to skip over mandatory steps (like canvas creation) without any trouble:\n\n```js\n// This will implicitly create the canvas and PDF objects before saving.\nvar worker = html2pdf().from(element).save();\n```\n\n#### Workflow\n\nThe basic workflow of html2pdf tasks (enforced by the prereq system) is:\n\n```\n.from() -> .toContainer() -> .toCanvas() -> .toImg() -> .toPdf() -> .save()\n```\n\n#### Worker API\n\n| Method       | Arguments          | Description |\n|--------------|--------------------|-------------|\n| from         | src, type          | Sets the source (HTML string or element) for the PDF. Optional `type` specifies other sources: `'string'`, `'element'`, `'canvas'`, or `'img'`. |\n| to           | target             | Converts the source to the specified target (`'container'`, `'canvas'`, `'img'`, or `'pdf'`). Each target also has its own `toX` method that can be called directly: `toContainer()`, `toCanvas()`, `toImg()`, and `toPdf()`. |\n| output       | type, options, src | Routes to the appropriate `outputPdf` or `outputImg` method based on specified `src` (`'pdf'` (default) or `'img'`). |\n| outputPdf    | type, options      | Sends `type` and `options` to the jsPDF object's `output` method, and returns the result as a Promise (use `.then` to access). See the [jsPDF source code](https://rawgit.com/MrRio/jsPDF/master/docs/jspdf.js.html#line992) for more info. |\n| outputImg    | type, options      | Returns the specified data type for the image as a Promise (use `.then` to access). Supported types: `'img'`, `'datauristring'`/`'dataurlstring'`, and `'datauri'`/`'dataurl'`. |\n| save         | filename           | Saves the PDF object with the optional filename (creates user download prompt). |\n| set          | opt                | Sets the specified properties. See [Options](#options) below for more details. |\n| get          | key, cbk           | Returns the property specified in `key`, either as a Promise (use `.then` to access), or by calling `cbk` if provided. |\n| then         | onFulfilled, onRejected | Standard Promise method, with `this` re-bound to the Worker, and with added progress-tracking (see [Progress](#progress) below). Note that `.then` returns a `Worker`, which is a subclass of Promise. |\n| thenCore     | onFulFilled, onRejected | Standard Promise method, with `this` re-bound to the Worker (no progress-tracking). Note that `.thenCore` returns a `Worker`, which is a subclass of Promise. |\n| thenExternal | onFulfilled, onRejected | True Promise method. Using this 'exits' the Worker chain - you will not be able to continue chaining Worker methods after `.thenExternal`. |\n| catch, catchExternal | onRejected | Standard Promise method. `catchExternal` exits the Worker chain - you will not be able to continue chaining Worker methods after `.catchExternal`. |\n| error        | msg                | Throws an error in the Worker's Promise chain. |\n\nA few aliases are also provided for convenience:\n\n| Method    | Alias     |\n|-----------|-----------|\n| save      | saveAs    |\n| set       | using     |\n| output    | export    |\n| then      | run       |\n\n## Options\n\nhtml2pdf can be configured using an optional `opt` parameter:\n\n```js\nvar element = document.getElementById('element-to-print');\nvar opt = {\n  margin:       1,\n  filename:     'myfile.pdf',\n  image:        { type: 'jpeg', quality: 0.98 },\n  html2canvas:  { scale: 2 },\n  jsPDF:        { unit: 'in', format: 'letter', orientation: 'portrait' }\n};\n\n// New Promise-based usage:\nhtml2pdf().set(opt).from(element).save();\n\n// Old monolithic-style usage:\nhtml2pdf(element, opt);\n```\n\nThe `opt` parameter has the following optional fields:\n\n|Name        |Type            |Default                         |Description                                                                                                 |\n|------------|----------------|--------------------------------|------------------------------------------------------------------------------------------------------------|\n|margin      |number or array |`0`                             |PDF margin (in jsPDF units). Can be a single number, `[vMargin, hMargin]`, or `[top, left, bottom, right]`. |\n|filename    |string          |`'file.pdf'`                    |The default filename of the exported PDF.                                                                   |\n|pagebreak   |object          |`{mode: ['css', 'legacy']}`     |Controls the pagebreak behaviour on the page. See [Page-breaks](#page-breaks) below.                        |\n|image       |object          |`{type: 'jpeg', quality: 0.95}` |The image type and quality used to generate the PDF. See [Image type and quality](#image-type-and-quality) below.|\n|enableLinks |boolean         |`true`                          |If enabled, PDF hyperlinks are automatically added ontop of all anchor tags.                                |\n|html2canvas |object          |`{ }`                           |Configuration options sent directly to `html2canvas` ([see here](https://html2canvas.hertzen.com/configuration) for usage).|\n|jsPDF       |object          |`{ }`                           |Configuration options sent directly to `jsPDF` ([see here](http://rawgit.com/MrRio/jsPDF/master/docs/jsPDF.html) for usage).|\n\n### Page-breaks\n\nhtml2pdf has the ability to automatically add page-breaks to clean up your document. Page-breaks can be added by CSS styles, set on individual elements using selectors, or avoided from breaking inside all elements (`avoid-all` mode).\n\nBy default, html2pdf will respect most CSS [`break-before`](https://developer.mozilla.org/en-US/docs/Web/CSS/break-before), [`break-after`](https://developer.mozilla.org/en-US/docs/Web/CSS/break-after), and [`break-inside`](https://developer.mozilla.org/en-US/docs/Web/CSS/break-inside) rules, and also add page-breaks after any element with class `html2pdf__page-break` (for legacy purposes).\n\n#### Page-break settings\n\n|Setting   |Type            |Default             |Description |\n|----------|----------------|--------------------|------------|\n|mode      |string or array |`['css', 'legacy']` |The mode(s) on which to automatically add page-breaks. One or more of `'avoid-all'`, `'css'`, and `'legacy'`. |\n|before    |string or array |`[]`                |CSS selectors for which to add page-breaks before each element. Can be a specific element with an ID (`'#myID'`), all elements of a type (e.g. `'img'`), all of a class (`'.myClass'`), or even `'*'` to match every element. |\n|after     |string or array |`[]`                |Like 'before', but adds a page-break immediately after the element. |\n|avoid     |string or array |`[]`                |Like 'before', but avoids page-breaks on these elements. You can enable this feature on every element using the 'avoid-all' mode. |\n\n#### Page-break modes\n\n| Mode      | Description |\n|-----------|-------------|\n| avoid-all | Automatically adds page-breaks to avoid splitting any elements across pages. |\n| css       | Adds page-breaks according to the CSS `break-before`, `break-after`, and `break-inside` properties. Only recognizes `always/left/right` for before/after, and `avoid` for inside. |\n| legacy    | Adds page-breaks after elements with class `html2pdf__page-break`. This feature may be removed in the future. |\n\n#### Example usage\n\n```js\n// Avoid page-breaks on all elements, and add one before #page2el.\nhtml2pdf().set({\n  pagebreak: { mode: 'avoid-all', before: '#page2el' }\n});\n\n// Enable all 'modes', with no explicit elements.\nhtml2pdf().set({\n  pagebreak: { mode: ['avoid-all', 'css', 'legacy'] }\n});\n\n// No modes, only explicit elements.\nhtml2pdf().set({\n  pagebreak: { before: '.beforeClass', after: ['#after1', '#after2'], avoid: 'img' }\n});\n```\n\n### Image type and quality\n\nYou may customize the image type and quality exported from the canvas by setting the `image` option. This must be an object with the following fields:\n\n|Name        |Type            |Default                       |Description                                                                                  |\n|------------|----------------|------------------------------|---------------------------------------------------------------------------------------------|\n|type        |string          |'jpeg'                        |The image type. HTMLCanvasElement only supports 'png', 'jpeg', and 'webp' (on Chrome).       |\n|quality     |number          |0.95                          |The image quality, from 0 to 1. This setting is only used for jpeg/webp (not png).           |\n\nThese options are limited to the available settings for [HTMLCanvasElement.toDataURL()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL), which ignores quality settings for 'png' images. To enable png image compression, try using the [canvas-png-compression shim](https://github.com/ShyykoSerhiy/canvas-png-compression), which should be an in-place solution to enable png compression via the `quality` option.\n\n## Progress tracking\n\nThe Worker object returned by `html2pdf()` has a built-in progress-tracking mechanism. It will be updated to allow a progress callback that will be called with each update, however it is currently a work-in-progress.\n\n## Dependencies\n\nhtml2pdf depends on the external packages [html2canvas](https://github.com/niklasvh/html2canvas), [jsPDF](https://github.com/MrRio/jsPDF), and [es6-promise](https://github.com/stefanpenner/es6-promise). These dependencies are automatically loaded when using NPM or the bundled package.\n\nIf using the unbundled `dist/html2pdf.min.js` (or its un-minified version), you must also include each dependency. Order is important, otherwise html2canvas will be overridden by jsPDF's own internal implementation:\n\n```html\n<script src=\"es6-promise.auto.min.js\"></script>\n<script src=\"jspdf.min.js\"></script>\n<script src=\"html2canvas.min.js\"></script>\n<script src=\"html2pdf.min.js\"></script>\n```\n\n## Contributing\n\n### Issues\n\nWhen submitting an issue, please provide reproducible code that highlights the issue, preferably by creating a fork of [this template jsFiddle](https://jsfiddle.net/u6o6ne41/) (which has html2pdf already loaded). Remember that html2pdf uses [html2canvas](https://github.com/niklasvh/html2canvas) and [jsPDF](https://github.com/MrRio/jsPDF) as dependencies, so it's a good idea to check each of those repositories' issue trackers to see if your problem has already been addressed.\n\n### Tests\n\nhtml2pdf is currently sorely lacking in unit tests. Any contributions or suggestions of automated (or manual) tests are welcome. This is high on the to-do list for this project.\n\n### Pull requests\n\nIf you want to create a new feature or bugfix, please feel free to fork and submit a pull request! Use the [`develop`](/eKoopmans/html2pdf/tree/develop) branch, which features the latest development, and make changes to `/src/` rather than directly to `/dist/`. You can test your changes by rebuilding with `npm run build`.\n\n## Credits\n\n[Erik Koopmans](https://github.com/eKoopmans)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2017 Erik Koopmans <[http://www.erik-koopmans.com/](http://www.erik-koopmans.com/)>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/eKoopmans/html2pdf.git"
  },
  "scripts": {
    "build": "rollup -c",
    "clean": "rimraf dist",
    "prebuild": "npm install && npm run clean",
    "publish": "npm publish",
    "release": "gulp release --tagmessage",
    "stage-release": "gulp stage-release --newversion",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.9.1"
}
