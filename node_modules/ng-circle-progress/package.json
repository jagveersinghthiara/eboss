{
  "_from": "ng-circle-progress",
  "_id": "ng-circle-progress@1.3.0",
  "_inBundle": false,
  "_integrity": "sha512-NHCgY6xqAw7KYsph7Zw091GQD2EDmsPsBzGMr+yJuuCjBzhQSvB6pD95ZVqCIk/IDJ8FA1SAtFPAszZ3BbHHqw==",
  "_location": "/ng-circle-progress",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "ng-circle-progress",
    "fetchSpec": "latest",
    "name": "ng-circle-progress",
    "raw": "ng-circle-progress",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ng-circle-progress/-/ng-circle-progress-1.3.0.tgz",
  "_shasum": "28e2d3154f5356cf348758879cf8a57da860b16c",
  "_shrinkwrap": null,
  "_spec": "ng-circle-progress",
  "_where": "/home/bunny/Desktop/client(2)",
  "author": {
    "email": "bootsoon@aliyun.com",
    "name": "bootsoon"
  },
  "bugs": {
    "url": "https://github.com/bootsoon/ng-circle-progress/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A simple circle progress component created for Angular based only on SVG graphics",
  "devDependencies": {},
  "homepage": "https://github.com/bootsoon/ng-circle-progress#readme",
  "keywords": [
    "angular",
    "circle",
    "percentage",
    "progress"
  ],
  "license": "MIT",
  "module": "ng-circle-progress.js",
  "name": "ng-circle-progress",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/core": ">=4.0.0",
    "rxjs": "^6.2.1",
    "zone.js": "^0.8.4"
  },
  "readme": "# ng-circle-progress\r\n\r\n## Demo\r\n\r\n[Try out the demo!](https://bootsoon.github.io/ng-circle-progress/)\r\n\r\n[![demo](https://raw.githubusercontent.com/bootsoon/ng-circle-progress/master/demo.png)](https://bootsoon.github.io/ng-circle-progress/)\r\n\r\n## About\r\n\r\nIt is a simple circle progress component created for [angular](https://angular.io) based only on SVG graphics and has various of options to customize it.\r\n\r\n## Installation\r\n\r\nTo install this library, run:\r\n\r\n### Angular 6 projects\r\n\r\n```bash\r\n$ npm install ng-circle-progress --save\r\n```\r\n\r\n### Angular 5 or Angular 4 projects\r\n\r\n```bash\r\n$ npm install ng-circle-progress@1.0.0 --save\r\n```\r\n\r\nOnce you have installed it, you can import it in any Angular application,\r\n\r\nthen from your Angular `AppModule`:\r\n\r\n```typescript\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\n\r\n// Import ng-circle-progress\r\nimport { NgCircleProgressModule } from 'ng-circle-progress';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n\r\n    // Specify ng-circle-progress as an import\r\n    NgCircleProgressModule.forRoot({\r\n      // set defaults here\r\n      radius: 100,\r\n      outerStrokeWidth: 16,\r\n      innerStrokeWidth: 8,\r\n      outerStrokeColor: \"#78C000\",\r\n      innerStrokeColor: \"#C7E596\",\r\n      animationDuration: 300,\r\n      ...\r\n    })\r\n\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n```\r\n\r\nOnce NgCircleProgressModule is imported, you can use CircleProgressComponent in your Angular application:\r\n\r\n```xml\r\n<!-- You can now use it in app.component.html -->\r\n<circle-progress\r\n  [percent]=\"85\"\r\n  [radius]=\"100\"\r\n  [outerStrokeWidth]=\"16\"\r\n  [innerStrokeWidth]=\"8\"\r\n  [outerStrokeColor]=\"'#78C000'\"\r\n  [innerStrokeColor]=\"'#C7E596'\"\r\n  [animation]=\"true\"\r\n  [animationDuration]=\"300\"\r\n></circle-progress>\r\n\r\n```\r\n\r\n## Options\r\n\r\nOption | Type | Default | Description\r\n--- | --- | --- | ---\r\npercent | `number` | `0` | Number of percent you want to show\r\nmaxPercent | `number` | `1000` | Max number of percent you want to show\r\nradius | `number` | `90` | Radius of circle\r\nclockwise | `boolean` | `true` | Whether to rotate clockwise or counter-clockwise\r\nresponsive | `boolean` | `false` | Whether to make the circle responsive\r\nstartFromZero | `boolean` | `true` | Whether to start the percent from zero \r\nshowTitle | `boolean` | `true` | Whether to display title\r\nshowSubtitle | `boolean` | `true` | Whether to display subtitle\r\nshowUnits | `boolean` | `true` | Whether to display units\r\nshowImage | `boolean` | `true` | Whether to display image. All text will be hidden if showImage is true.\r\nshowBackground | `boolean` | `true` | Whether to display background circle\r\nshowInnerStroke | `boolean` | `true` | Whether to display inner stroke\r\nbackgroundStroke | `string` | `'transparent'` | Background stroke color\r\nbackgroundStrokeWidth | `number` | `0` | Stroke width of background circle\r\nbackgroundPadding | `number` | `5` | Padding of background circle\r\nbackgroundColor | `string` | `'transparent'` | Background color\r\nbackgroundOpacity | `number` | `1` | Opacity of background color\r\nspace | `number` | `4` | Space between outer circle and inner circle\r\ntoFixed | `number` | `0` | Using fixed digital notation in Title\r\nrenderOnClick | `boolean` | `true` | Render when component is clicked\r\nunits | `string` | `'%'` | Units showed aside the title\r\nunitsFontSize | `string` | `'10'` | Font size of units\r\nunitsColor | `string` | `'#444444'` | Font color of units\r\nouterStrokeWidth | `number` | `8` | Stroke width of outer circle (progress circle)\r\nouterStrokeColor | `sting` | `'#78C000'` | Stroke color of outer circle\r\nouterStrokeLinecap | `sting` | `'round'` | Stroke linecap of outer circle. Possible values(butt, round, square, inherit)\r\ninnerStrokeWidth | `number` | `4` | Stroke width of inner circle\r\ninnerStrokeColor | `sting` | `'#C7E596'` | Stroke color of inner circle\r\ntitle | `string\\|Array<String>` | `'auto'` | text showed as title. Percentage is displayed when title equals 'auto'.\r\ntitleFormat | `Function` | `undefined` | A callback function to format title. It returns a string or an array of string.\r\ntitleColor | `string` | `'#444444'` | Font color of title\r\ntitleFontSize | `string` | `'20'` | Font size of title\r\nsubtitle | `string\\|Array<String>` | `'Percent'` | text showed as subtitle\r\nsubtitleFormat | `Function` | `undefined` | A callback function to format subtitle. It returns a string or an array of string.\r\nsubtitleColor | `string` | `'#A9A9A9'` | Font color of subtitle\r\nsubtitleFontSize | `string` | `'10'` | Font size of subtitle\r\nimageSrc | `string` | `'/assets/images/music.svg'` | Src of image\r\nimageHeight | `number` | `80` | Height of image\r\nimageWidth | `number` | `80` | Width of image\r\nanimation | `boolean` | `true` | Whether to animate the outer circle when rendering\r\nanimateTitle | `boolean` | `true` | Whether to animate the title when rendering\r\nanimateSubtitle | `boolean` | `false` | Whether to animate the subtitle when rendering\r\nanimationDuration | `number` | `500` | Duration of animation in microseconds\r\nclass | `string` | `''` | CSS class name for SVG element\r\n\r\n\r\n```typescript\r\n// subtitleFormat callback example\r\nformatSubtitle = (percent: number) : string => {\r\n  if(percent >= 100){\r\n    return \"Congratulations!\"\r\n  }else if(percent >= 50){\r\n    return \"Half\"\r\n  }else if(percent > 0){\r\n    return \"Just began\"\r\n  }else {\r\n    return \"Not started\"\r\n  }\r\n}\r\n\r\n```\r\n\r\n## Development (needs Angular 6)\r\n\r\nTo generate all `*.js`, `*.d.ts` and `*.metadata.json` files:\r\n\r\n```bash\r\n$ npm run build\r\n```\r\n\r\nTo lint all `*.ts` files:\r\n\r\n```bash\r\n$ npm run lint\r\n```\r\n\r\n## License\r\n\r\nMIT Â© [bootsoon](mailto:bootsoon@aliyun.com)\r\n\r\nThis project was generated by [Yeoman generator angular2-library](https://github.com/jvandemo/generator-angular2-library)\r\n\r\n",
  "readmeFilename": "README.MD",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bootsoon/ng-circle-progress.git"
  },
  "typings": "ng-circle-progress.d.ts",
  "version": "1.3.0"
}
