{
  "_from": "@ngu/carousel",
  "_id": "@ngu/carousel@1.5.5",
  "_inBundle": false,
  "_integrity": "sha512-tPDThxM325ss4fBzUtu7OExuC0aR8QIZIHJwYHpfF955TR9Zs0argokopS8DX9mCTM3tYL+Qgy1ui0KjCJzHBg==",
  "_location": "/@ngu/carousel",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "@ngu%2fcarousel",
    "fetchSpec": "latest",
    "name": "@ngu/carousel",
    "raw": "@ngu/carousel",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "scope": "@ngu",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@ngu/carousel/-/carousel-1.5.5.tgz",
  "_shasum": "285001d54020fbfa74d07da7df68d802175f92e2",
  "_shrinkwrap": null,
  "_spec": "@ngu/carousel",
  "_where": "/home/bunny/Desktop/aprilezeeboss",
  "bugs": {
    "url": "https://github.com/sheikalthaf/ngu-carousel/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "tslib": "^1.9.0"
  },
  "deprecated": false,
  "description": "Angular Universal carousel",
  "devDependencies": {},
  "es2015": "fesm2015/ngu-carousel.js",
  "esm2015": "esm2015/ngu-carousel.js",
  "esm5": "esm5/ngu-carousel.js",
  "fesm2015": "fesm2015/ngu-carousel.js",
  "fesm5": "fesm5/ngu-carousel.js",
  "homepage": "https://ngu-carousel.firebaseapp.com",
  "license": "MIT",
  "main": "bundles/ngu-carousel.umd.js",
  "metadata": "ngu-carousel.metadata.json",
  "module": "fesm5/ngu-carousel.js",
  "name": "@ngu/carousel",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/common": "^6.0.0 || ^7.0.0",
    "@angular/core": "^6.0.0 || ^7.0.0",
    "hammerjs": "^2.0.8"
  },
  "readme": "# ngu-carousel\r\n\r\nAngular Universal carousel\r\n\r\n`Note: This carousel doesn't include any css. go and customize css for buttons, items except ngucarousel and ngucarousel-inner`\r\n\r\n## changelog [![npm version](https://badge.fury.io/js/%40ngu%2Fcarousel.svg)](https://badge.fury.io/js/%40ngu%2Fcarousel)\r\n\r\nfor ChangeLog go to [CHANGELOG.md](https://github.com/sheikalthaf/ngu-carousel/blob/master/CHANGELOG.md)\r\n\r\n## Demo\r\n\r\nDemo available in Stackblitz [Here](https://stackblitz.com/edit/ngu-carousel-ng6)\r\n\r\nDemo available [Here](https://ngu-carousel.firebaseapp.com)\r\n\r\n## Installation\r\n\r\n`npm install @ngu/carousel --save`\r\n\r\nInclude CarouselModule in your app module:\r\n\r\n```javascript\r\nimport { NguCarouselModule } from '@ngu/carousel';\r\n\r\n@NgModule({\r\n  imports: [NguCarouselModule]\r\n})\r\nexport class AppModule {}\r\n```\r\n\r\nNow ngu-carousel supports touch with the help of hammerjs\r\n\r\n`npm install hammerjs --save`\r\n\r\nImport hammerjs in `main.ts` file\r\n\r\n```javascript\r\nimport 'hammerjs';\r\n```\r\n\r\nThen use in your component:\r\n\r\n```javascript\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { NguCarouselConfig } from '@ngu/carousel';\r\n\r\n@Component({\r\n  selector: 'sample',\r\n  template: `\r\n    <ngu-carousel #myCarousel [inputs]=\"carouselTile\" [dataSource]=\"carouselTileItems\">\r\n  <ngu-tile *nguCarouselDef=\"let item; let i = index\">\r\n\r\n    <ngu-carousel #myCarousel [inputs]=\"carouselTile\" (carouselLoad)=\"carouselTileLoad(i)\" [dataSource]=\"carouselTiles[i]\">\r\n      <ngu-tile *nguCarouselDef=\"let item; let j = index\">\r\n        <div class=\"tile\" [style.background]=\"'url(' + item + ')'\" style=\"min-height: 200px\">\r\n          <h1>{{j}}</h1>\r\n        </div>\r\n      </ngu-tile>\r\n      <button NguCarouselPrev class=\"leftRs\" [style.opacity]=\"myCarousel.isFirst ? 0.5:1\">&lt;</button>\r\n      <button NguCarouselNext class=\"rightRs\" [style.opacity]=\"myCarousel.isLast ? 0.5:1\">&gt;</button>\r\n      <ul class=\"myPoint\" NguCarouselPoint>\r\n        <li *ngFor=\"let j of myCarousel.pointNumbers; let j = index\" [class.active]=\"j==myCarousel.activePoint\" (click)=\"myCarousel.moveTo(j)\"\r\n          [style.background]=\"'url(' + carouselTileItems[j] + ')'\"></li>\r\n      </ul>\r\n    </ngu-carousel>\r\n\r\n  </ngu-tile>\r\n  <button NguCarouselPrev class=\"leftRs\" [style.opacity]=\"myCarousel.isFirst ? 0.5:1\">&lt;</button>\r\n  <button NguCarouselNext class=\"rightRs\" [style.opacity]=\"myCarousel.isLast ? 0.5:1\">&gt;</button>\r\n  <ul class=\"myPoint\" NguCarouselPoint>\r\n    <li *ngFor=\"let i of myCarousel.pointNumbers; let i = index\" [class.active]=\"i==myCarousel.activePoint\" (click)=\"myCarousel.moveTo(i)\"\r\n      [style.background]=\"'url(' + carouselTileItems[i] + ')'\"></li>\r\n  </ul>\r\n</ngu-carousel>\r\n\r\n  `,\r\n})\r\nexport class SampleComponent implements OnInit {\r\n  imgags = [\r\n    'assets/bg.jpg',\r\n    'assets/car.png',\r\n    'assets/canberra.jpg',\r\n    'assets/holi.jpg'\r\n  ];\r\n  public carouselTileItems: Array<any> = [0, 1, 2, 3, 4, 5];\r\n  public carouselTiles = {\r\n    0: [],\r\n    1: [],\r\n    2: [],\r\n    3: [],\r\n    4: [],\r\n    5: []\r\n  };\r\n  public carouselTile: NguCarouselConfig = {\r\n    grid: { xs: 1, sm: 1, md: 3, lg: 3, all: 0 },\r\n    slide: 3,\r\n    speed: 250,\r\n    point: {\r\n      visible: true\r\n    },\r\n    load: 2,\r\n    velocity: 0,\r\n    touch: true,\r\n    easing: 'cubic-bezier(0, 0, 0.2, 1)'\r\n  };\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.carouselTileItems.forEach(el => {\r\n      this.carouselTileLoad(el);\r\n    });\r\n  }\r\n\r\n  public carouselTileLoad(j) {\r\n    // console.log(this.carouselTiles[j]);\r\n    const len = this.carouselTiles[j].length;\r\n    if (len <= 30) {\r\n      for (let i = len; i < len + 15; i++) {\r\n        this.carouselTiles[j].push(\r\n          this.imgags[Math.floor(Math.random() * this.imgags.length)]\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Input Interface\r\n\r\n```javascript\r\nexport class NguCarouselStore {\r\n  type: string;\r\n  deviceType: DeviceType;\r\n  token: string;\r\n  items: number;\r\n  load: number;\r\n  deviceWidth: number;\r\n  carouselWidth: number;\r\n  itemWidth: number;\r\n  visibleItems: ItemsControl;\r\n  slideItems: number;\r\n  itemWidthPer: number;\r\n  itemLength: number;\r\n  currentSlide: number;\r\n  easing: string;\r\n  speed: number;\r\n  transform: Transfrom;\r\n  loop: boolean;\r\n  dexVal: number;\r\n  touchTransform: number;\r\n  touch: Touch;\r\n  isEnd: boolean;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  RTL: boolean;\r\n  vertical: Vertical;\r\n}\r\nexport type DeviceType = 'xs' | 'sm' | 'md' | 'lg' | 'all';\r\n\r\nexport class ItemsControl {\r\n  start: number;\r\n  end: number;\r\n}\r\n\r\nexport class Vertical {\r\n  enabled: boolean;\r\n  height: number;\r\n}\r\n\r\nexport class Touch {\r\n  active?: boolean;\r\n  swipe: string;\r\n  velocity: number;\r\n}\r\n\r\nexport class NguCarouselConfig {\r\n  grid: Transfrom;\r\n  slide?: number;\r\n  speed?: number;\r\n  interval?: CarouselInterval;\r\n  animation?: Animate;\r\n  point?: Point;\r\n  type?: string;\r\n  load?: number;\r\n  custom?: Custom;\r\n  loop?: boolean;\r\n  touch?: boolean;\r\n  easing?: string;\r\n  RTL?: boolean;\r\n  button?: NguButton;\r\n  vertical?: Vertical;\r\n  velocity?: number;\r\n}\r\n\r\nexport class Grid {\r\n  xs: number;\r\n  sm: number;\r\n  md: number;\r\n  lg: number;\r\n  all: number;\r\n}\r\n\r\nexport interface Point {\r\n  visible: boolean;\r\n  hideOnSingleSlide?: boolean;\r\n}\r\n\r\nexport type Custom = 'banner';\r\nexport type Animate = 'lazy';\r\n```\r\n\r\n| Command                   | Type          | Required | Description                                                                                                                                                                                                                   |\r\n| ------------------------- | ------------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `grid`                    | Object        | Yes      | **xs** - mobile, **sm** - tablet, **md** - desktop, **lg** - large desktops, **all** - fixed width (When you use **all** make others 0 and vise versa)                                                                        |\r\n| `slide`                   | number        | optional | It is used to slide the number items on click                                                                                                                                                                                 |\r\n| `speed`                   | milli seconds | optional | It is used for time taken to slide the number items                                                                                                                                                                           |\r\n| `interval`                | milli seconds | optional | It is used to make carousel auto slide with given value. interval defines the interval between slides                                                                                                                         |\r\n| `load`                    | number        | optional | is used to load the items similar to pagination. the carousel will tigger the carouslLoad function to load another set of items. it will help you to improve the performance of the app.**`(carouselLoad)=\"myfunc($event)\"`** |\r\n| `point.visible`           | boolean       | optional | It is used to indicate no. of slides and also shows the current active slide.                                                                                                                                                 |\r\n| `point.hideOnSingleSlide` | boolean       | optional | It is used to hide the point indicator when slide is less than one.                                                                                                                                                           |\r\n| `touch`                   | boolean       | optional | It is used to active touch support to the carousel.                                                                                                                                                                           |\r\n| `easing`                  | string        | optional | It is used to define the easing style of the carousel. Only define the ease name without any timing like `ease`,`ease-in`                                                                                                     |\r\n| `loop`                    | boolean       | optional | It is used to loop the `ngu-item | ngu-tile`. It must be true for `interval`                                                                                                                                                  |\r\n| `animation`               | string        | optional | It is used to animate the sliding items. currently it only supports `lazy`. more coming soon and also with custom css animation option                                                                                        |\r\n| `custom`                  | string        | optional | It is you to define the purpose of the carousel. currently it only supports `banner`. more coming soon and also with custom css animation option                                                                              |\r\n| `RTL`                     | boolean       | optional | This option enable the `rtl` direction and act as rtl. By default it is `ltr`                                                                                                                                                 |\r\n| `vertical.enabled`        | boolean       | optional | This option enable the `vertical` direction                                                                                                                                                                                   |\r\n| `vertical.height`         | boolean       | optional | This option is used to set the height of the carousel                                                                                                                                                                         |\r\n\r\n### Custom css for Point\r\n\r\n```html\r\n<ul class=\"ngucarouselPoint\">\r\n    <li *ngFor=\"let i of pointNumbers; let i = index\" [class.active]=\"i==pointers\"></li>\r\n</ul>\r\n```\r\n\r\nThis is HTML I'm using in the carousel. Add your own css according to this elements in `pointStyles`. check below guide for more details.\r\n\r\n```html\r\n<ngu-carousel\r\n      [inputs]=\"carouselBanner\"\r\n      (onMove)=\"onmoveFn($event)\"\r\n      (carouselLoad)=\"loadItemsFn()\">\r\n</ngu-carousel>\r\n```\r\n\r\n- `inputs` is an `Input` and It accepts `NguCarouselConfig`.\r\n- `onMove` is an `Output` which triggered on every slide before start and it will emit `$event` as `NguCarouselStore` object.\r\n- `carouselLoad` is an `Output` which triggered when slide reaches the end on items based on inputs `load`.\r\n\r\n# Getstarted guide\r\n\r\n## Banner with Custom point style\r\n\r\n```javascript\r\nimport { Component } from '@angular/core';\r\nimport { NguCarousel, NguCarouselStore } from '@ngu/carousel';\r\n\r\n@Component({\r\n  selector: 'app-carousel',\r\n  template: `\r\n    <ngu-carousel\r\n      [inputs]=\"carouselBanner\"\r\n      (onMove)=\"onmoveFn($event)\">\r\n\r\n          <ngu-item NguCarouselItem class=\"bannerStyle\">\r\n              <h1>1</h1>\r\n          </ngu-item>\r\n\r\n          <ngu-item NguCarouselItem class=\"bannerStyle\">\r\n              <h1>2</h1>\r\n          </ngu-item>\r\n\r\n          <ngu-item NguCarouselItem class=\"bannerStyle\">\r\n              <h1>3</h1>\r\n          </ngu-item>\r\n\r\n          <button NguCarouselPrev class='leftRs'>&lt;</button>\r\n          <button NguCarouselNext class='rightRs'>&gt;</button>\r\n    </ngu-carousel>\r\n  `,\r\n  styles: [\r\n    `\r\n    .bannerStyle h1 {\r\n        background-color: #ccc;\r\n        min-height: 300px;\r\n        text-align: center;\r\n        line-height: 300px;\r\n    }\r\n    .leftRs {\r\n        position: absolute;\r\n        margin: auto;\r\n        top: 0;\r\n        bottom: 0;\r\n        width: 50px;\r\n        height: 50px;\r\n        box-shadow: 1px 2px 10px -1px rgba(0, 0, 0, .3);\r\n        border-radius: 999px;\r\n        left: 0;\r\n    }\r\n\r\n    .rightRs {\r\n        position: absolute;\r\n        margin: auto;\r\n        top: 0;\r\n        bottom: 0;\r\n        width: 50px;\r\n        height: 50px;\r\n        box-shadow: 1px 2px 10px -1px rgba(0, 0, 0, .3);\r\n        border-radius: 999px;\r\n        right: 0;\r\n    }\r\n  `\r\n  ]\r\n})\r\nexport class Sample implements OnInit {\r\n  ngOnInit() {\r\n    this.carouselBanner = {\r\n      grid: { xs: 1, sm: 1, md: 1, lg: 1, all: 0 },\r\n      slide: 1,\r\n      speed: 400,\r\n      interval: {\r\n        timing: 3000,\r\n        initialDelay: 1000\r\n      },\r\n      point: {\r\n        visible: true\r\n      },\r\n      load: 2,\r\n      loop: true,\r\n      touch: true\r\n    };\r\n  }\r\n\r\n  /* It will be triggered on every slide*/\r\n  onmoveFn(data: NguCarouselStore) {\r\n    console.log(data);\r\n  }\r\n}\r\n```\r\n\r\n## Banner with Vertical carousel\r\n\r\n```javascript\r\nimport { Component } from '@angular/core';\r\nimport { NguCarousel, NguCarouselConfig } from '@ngu/carousel';\r\n\r\n@Component({\r\n  selector: 'app-carousel',\r\n  template: `\r\n    <ngu-carousel\r\n      [inputs]=\"carouselBanner\"\r\n      (onMove)=\"onmoveFn($event)\">\r\n\r\n          <ngu-item NguCarouselItem class=\"bannerStyle\">\r\n              <h1>1</h1>\r\n          </ngu-item>\r\n\r\n          <ngu-item NguCarouselItem class=\"bannerStyle\">\r\n              <h1>2</h1>\r\n          </ngu-item>\r\n\r\n          <ngu-item NguCarouselItem class=\"bannerStyle\">\r\n              <h1>3</h1>\r\n          </ngu-item>\r\n\r\n          <button NguCarouselPrev class='leftRs'>&lt;</button>\r\n          <button NguCarouselNext class='rightRs'>&gt;</button>\r\n    </ngu-carousel>\r\n  `,\r\n  styles: [\r\n    `\r\n    .bannerStyle h1 {\r\n        background-color: #ccc;\r\n        min-height: 300px;\r\n        text-align: center;\r\n        line-height: 300px;\r\n    }\r\n    .leftRs {\r\n        position: absolute;\r\n        margin: auto;\r\n        top: 0;\r\n        bottom: 0;\r\n        width: 50px;\r\n        height: 50px;\r\n        box-shadow: 1px 2px 10px -1px rgba(0, 0, 0, .3);\r\n        border-radius: 999px;\r\n        left: 0;\r\n    }\r\n\r\n    .rightRs {\r\n        position: absolute;\r\n        margin: auto;\r\n        top: 0;\r\n        bottom: 0;\r\n        width: 50px;\r\n        height: 50px;\r\n        box-shadow: 1px 2px 10px -1px rgba(0, 0, 0, .3);\r\n        border-radius: 999px;\r\n        right: 0;\r\n    }\r\n\r\n    .ngucarouselPoint {\r\n      list-style-type: none;\r\n      text-align: center;\r\n      padding: 12px;\r\n      margin: 0;\r\n      white-space: nowrap;\r\n      overflow: auto;\r\n      position: absolute;\r\n      width: 100%;\r\n      bottom: 20px;\r\n      left: 0;\r\n      box-sizing: border-box;\r\n    }\r\n    .ngucarouselPoint li {\r\n      display: inline-block;\r\n      border-radius: 999px;\r\n      background: rgba(255, 255, 255, 0.55);\r\n      padding: 5px;\r\n      margin: 0 3px;\r\n      transition: .4s ease all;\r\n    }\r\n    .ngucarouselPoint li.active {\r\n        background: white;\r\n        width: 10px;\r\n    }\r\n  `\r\n  ]\r\n})\r\nexport class Sample implements OnInit {\r\n  ngOnInit() {\r\n    this.carouselBanner = {\r\n      grid: { xs: 1, sm: 1, md: 1, lg: 1, all: 0 },\r\n      slide: 1,\r\n      speed: 400,\r\n      interval: 4000,\r\n      point: {\r\n        visible: true\r\n      },\r\n      load: 2,\r\n      loop: true,\r\n      touch: true, // touch is not currently in active for vertical carousel, will enable it in future build\r\n      vertical {\r\n        enabled: true,\r\n        height: 400\r\n      }\r\n    };\r\n  }\r\n\r\n  /* It will be triggered on every slide*/\r\n  onmoveFn(data: NguCarousel) {\r\n    console.log(data);\r\n  }\r\n}\r\n```\r\n\r\n## Tile with Carousel Control\r\n\r\n```javascript\r\nimport { Component } from '@angular/core';\r\nimport { NguCarousel, NguCarouselConfig } from '@ngu/carousel';\r\n\r\n@Component({\r\n  selector: 'app-carousel',\r\n  template: `\r\n    <ngu-carousel #carousel\r\n      [inputs]=\"carouselTile\"\r\n      (carouselLoad)=\"carouselTileLoad($event)\">\r\n\r\n            <ngu-tile NguCarouselItem *ngFor=\"let Tile of carouselTileItems\">\r\n                <h1>{{Tile + 1}}</h1>\r\n            </ngu-tile>\r\n\r\n          <button NguCarouselPrev class='leftRs'>&lt;</button>\r\n          <button NguCarouselNext class='rightRs'>&gt;</button>\r\n    </ngu-carousel>\r\n    <button (click)=\"resetFn()\">Reset</button>\r\n  `,\r\n  styles: [`\r\n\r\n    h1{\r\n      min-height: 200px;\r\n      background-color: #ccc;\r\n      text-align: center;\r\n      line-height: 200px;\r\n    }\r\n    .leftRs {\r\n        position: absolute;\r\n        margin: auto;\r\n        top: 0;\r\n        bottom: 0;\r\n        width: 50px;\r\n        height: 50px;\r\n        box-shadow: 1px 2px 10px -1px rgba(0, 0, 0, .3);\r\n        border-radius: 999px;\r\n        left: 0;\r\n    }\r\n\r\n    .rightRs {\r\n        position: absolute;\r\n        margin: auto;\r\n        top: 0;\r\n        bottom: 0;\r\n        width: 50px;\r\n        height: 50px;\r\n        box-shadow: 1px 2px 10px -1px rgba(0, 0, 0, .3);\r\n        border-radius: 999px;\r\n        right: 0;\r\n    }\r\n  `]\r\n})\r\nexport class Sample implements OnInit {\r\n  private carouselToken: string;\r\n\r\n  public carouselTileItems: Array<any>;\r\n  public carouselTile: NguCarouselConfig;\r\n  @ViewChild('carousel') carousel: NguCarousel;\r\n\r\n  constructor() {  }\r\n\r\n  ngOnInit(){\r\n    this.carouselTileItems = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\r\n\r\n    this.carouselTile = {\r\n      grid: {xs: 2, sm: 3, md: 3, lg: 5, all: 0},\r\n      slide: 2,\r\n      speed: 400,\r\n      animation: 'lazy',\r\n      point: {\r\n        visible: true\r\n      },\r\n      load: 2,\r\n      touch: true,\r\n      easing: 'ease'\r\n    }\r\n  }\r\n\r\n  initDataFn(key: NguCarouselStore) {\r\n    this.carouselToken = key.token;\r\n  }\r\n\r\n  resetFn() {\r\n    this.carousel.reset(this.carouselToken);\r\n  }\r\n\r\n  moveToSlide() {\r\n    this.carousel.moveToSlide(this.carouselToken, 2, false);\r\n  }\r\n\r\n  public carouselTileLoad(evt: any) {\r\n\r\n    const len = this.carouselTileItems.length\r\n    if (len <= 30) {\r\n      for (let i = len; i < len + 10; i++) {\r\n        this.carouselTileItems.push(i);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n     // carouselLoad will trigger this funnction when your load value reaches\r\n     // it is helps to load the data by parts to increase the performance of the app\r\n     // must use feature to all carousel\r\n\r\n}\r\n```\r\n\r\n## Tile with custom point style\r\n\r\n```javascript\r\nimport { Component } from '@angular/core';\r\nimport { NguCarousel } from '@ngu/carousel';\r\n\r\n@Component({\r\n  selector: 'app-carousel',\r\n  template: `\r\n    <ngu-carousel\r\n      [inputs]=\"carouselTile\"\r\n      (carouselLoad)=\"carouselTileLoad($event)\">\r\n\r\n            <ngu-tile NguCarouselItem *ngFor=\"let Tile of carouselTileItems\">\r\n                <h1>{{Tile + 1}}</h1>\r\n            </ngu-tile>\r\n\r\n          <button NguCarouselPrev class='leftRs'>&lt;</button>\r\n          <button NguCarouselNext class='rightRs'>&gt;</button>\r\n    </ngu-carousel>\r\n  `,\r\n  styles: [`\r\n\r\n    h1{\r\n      min-height: 200px;\r\n      background-color: #ccc;\r\n      text-align: center;\r\n      line-height: 200px;\r\n    }\r\n    .leftRs {\r\n        position: absolute;\r\n        margin: auto;\r\n        top: 0;\r\n        bottom: 0;\r\n        width: 50px;\r\n        height: 50px;\r\n        box-shadow: 1px 2px 10px -1px rgba(0, 0, 0, .3);\r\n        border-radius: 999px;\r\n        left: 0;\r\n    }\r\n\r\n    .rightRs {\r\n        position: absolute;\r\n        margin: auto;\r\n        top: 0;\r\n        bottom: 0;\r\n        width: 50px;\r\n        height: 50px;\r\n        box-shadow: 1px 2px 10px -1px rgba(0, 0, 0, .3);\r\n        border-radius: 999px;\r\n        right: 0;\r\n    }\r\n  `]\r\n})\r\nexport class Sample implements OnInit {\r\n\r\n  public carouselTileItems: Array<any>;\r\n  public carouselTile: NguCarousel;\r\n\r\n  ngOnInit(){\r\n    this.carouselTileItems = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\r\n\r\n    this.carouselTile = {\r\n      grid: {xs: 2, sm: 3, md: 3, lg: 5, all: 0},\r\n      slide: 2,\r\n      speed: 400,\r\n      animation: 'lazy',\r\n      point: {\r\n        visible: true,\r\n        pointStyles: `\r\n          .ngucarouselPoint {\r\n            list-style-type: none;\r\n            text-align: center;\r\n            padding: 12px;\r\n            margin: 0;\r\n            white-space: nowrap;\r\n            overflow: auto;\r\n            box-sizing: border-box;\r\n          }\r\n          .ngucarouselPoint li {\r\n            display: inline-block;\r\n            border-radius: 50%;\r\n            border: 2px solid rgba(0, 0, 0, 0.55);\r\n            padding: 4px;\r\n            margin: 0 3px;\r\n            transition-timing-function: cubic-bezier(.17, .67, .83, .67);\r\n            transition: .4s;\r\n          }\r\n          .ngucarouselPoint li.active {\r\n              background: #6b6b6b;\r\n              transform: scale(1.2);\r\n          }\r\n        `\r\n      },\r\n      load: 2,\r\n      touch: true,\r\n      easing: 'ease'\r\n    }\r\n  }\r\n\r\n  public carouselTileLoad(evt: any) {\r\n\r\n    const len = this.carouselTileItems.length\r\n    if (len <= 30) {\r\n      for (let i = len; i < len + 10; i++) {\r\n        this.carouselTileItems.push(i);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n     // carouselLoad will trigger this funnction when your load value reaches\r\n     // it is helps to load the data by parts to increase the performance of the app\r\n     // must use feature to all carousel\r\n\r\n}\r\n```\r\n\r\n## License\r\n\r\n[MIT](LICENSE) license.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sheikalthaf/ngu-carousel.git"
  },
  "sideEffects": false,
  "typings": "ngu-carousel.d.ts",
  "version": "1.5.5"
}
